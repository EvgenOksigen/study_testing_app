{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialTasks from '../../../api/tasks';\nimport initialTaskLists from \"../../../api/taskList\";\nconst initialState = {\n  taskList: [],\n  allTasks: []\n};\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.INIT_TASKS]: state => {\n    let storeTaskList = JSON.parse(localStorage.getItem(\"tasks-list\"));\n    let storeTask = JSON.parse(localStorage.getItem(\"tasks\"));\n\n    if (!storeTask || !storeTaskList) {\n      initialTaskLists.map(item => {\n        initialTasks.map(task => {\n          if (task.status === item.id) {\n            item.tasks.push(task);\n          }\n        });\n      });\n      return _objectSpread({}, state, {\n        taskList: initialTaskLists,\n        allTasks: initialTasks\n      });\n    } else {\n      return _objectSpread({}, state, {\n        taskList: storeTaskList,\n        allTasks: storeTask\n      });\n    }\n  },\n  [types.ADD_TASK]: (state, {\n    title,\n    id\n  }) => {\n    const allTasks = [...state.allTasks];\n    const taskList = [...state.taskList];\n\n    if (title !== undefined && title !== '') {\n      allTasks.push({\n        id: state.allTasks.length,\n        title: title,\n        status: id\n      });\n      taskList.map(item => {\n        if (item.id === id) {\n          item.tasks.push({\n            id: state.allTasks.length,\n            title: title,\n            status: id\n          });\n        }\n      });\n    }\n\n    return _objectSpread({}, state, {\n      taskList: taskList,\n      allTasks: allTasks\n    });\n  },\n  [types.CREATE_NEW_COLLUM]: (state, {\n    title\n  }) => {\n    const taskListUpdate = [...state.taskList];\n    let id = state.taskList.length;\n    let taskTitle = title;\n    taskListUpdate.push({\n      id: id,\n      title: taskTitle,\n      tasks: []\n    });\n    return _objectSpread({}, state, {\n      taskList: taskListUpdate\n    });\n  },\n  [types.CHANGE_TASK]: (state, {\n    columnId,\n    id\n  }) => {\n    const allTasks = [...state.allTasks];\n    const taskList = [...state.taskList];\n    let targetTask;\n    allTasks.map(task => {\n      if (task.id === parseInt(id)) {\n        targetTask = task;\n        task.status = parseInt(columnId);\n      }\n    });\n    taskList.map(item => {\n      if (item.id === parseInt(columnId)) {\n        item.tasks.push(targetTask);\n      }\n    });\n    taskList.map(item => {\n      if (item.id !== parseInt(columnId)) {\n        item.tasks = item.tasks.filter(task => task.id !== targetTask.id);\n      }\n    });\n    console.log(taskList);\n    return _objectSpread({}, state, {\n      allTasks: allTasks,\n      taskList: taskList\n    });\n  },\n  [types.DRAG_ITEM_TO_COLUMN]: (state, {\n    columnId,\n    taskId\n  }) => {\n    let allTasks = [...state.allTasks];\n    let taskList = [...state.taskList];\n    let targetTaskList;\n    let targetTask;\n    console.log('before', allTasks);\n    allTasks.map(task => {\n      if (task.id === parseInst(taskId)) {\n        task.status = parseInt(columnId);\n        return targetTask = task;\n      }\n    });\n    console.log('targetTask', targetTask);\n    taskList.map(item => {\n      if (item.id === parseInt(columnId)) {\n        return targetTaskList = item.tasks;\n      }\n    });\n    console.log('targetTaskList', targetTaskList);\n    let filterList = targetTaskList.filter(task => task.id !== parseInst(taskId));\n    taskList.map(item => {\n      if (item.id === parseInt(columnId)) {\n        return item.tasks = filterList;\n      } else {\n        item.tasks = [];\n        allTasks.map(task => {\n          if (task.status === item.id) {\n            item.tasks.push(task);\n          }\n        });\n      }\n    });\n    console.log('taskList UPD', taskList);\n    console.log('after', allTasks);\n    console.log('filter', filterList);\n    return _objectSpread({}, state, {\n      allTasks\n    });\n  },\n  [types.SWAP]: (state, {\n    columnID,\n    taskId\n  }) => {\n    let allTasks = [...state.allTasks];\n    let taskList = [...state.taskList];\n    let targetTaskList;\n    let targetTask;\n    console.log('before', allTasks);\n    allTasks.map(task => {\n      if (task.id === taskId) {\n        task.status = columnID + 1;\n        return targetTask = task;\n      }\n    });\n    console.log('targetTask', targetTask);\n    taskList.map(item => {\n      if (item.id === columnID) {\n        return targetTaskList = item.tasks;\n      }\n    });\n    console.log('targetTaskList', targetTaskList);\n    let filterList = targetTaskList.filter(task => task.id !== taskId);\n    taskList.map(item => {\n      if (item.id === columnID) {\n        return item.tasks = filterList;\n      } else {\n        item.tasks = [];\n        allTasks.map(task => {\n          if (task.status === item.id) {\n            item.tasks.push(task);\n          }\n        });\n      }\n    });\n    console.log('taskList UPD', taskList);\n    console.log('after', allTasks);\n    console.log('filter', filterList);\n    return _objectSpread({}, state, {\n      allTasks\n    });\n  }\n});\nexport default taskReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/task/reducers.js"],"names":["types","createReducer","initialTasks","initialTaskLists","initialState","taskList","allTasks","taskReducer","INIT_TASKS","state","storeTaskList","JSON","parse","localStorage","getItem","storeTask","map","item","task","status","id","tasks","push","ADD_TASK","title","undefined","length","CREATE_NEW_COLLUM","taskListUpdate","taskTitle","CHANGE_TASK","columnId","targetTask","parseInt","filter","console","log","DRAG_ITEM_TO_COLUMN","taskId","targetTaskList","parseInst","filterList","SWAP","columnID"],"mappings":"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","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\"\nimport initialTasks from '../../../api/tasks'\nimport initialTaskLists from \"../../../api/taskList\";\n\nconst initialState = {\n  taskList:[],\n  allTasks: []\n}\n\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.INIT_TASKS]: (state) => {\n\n    let storeTaskList = JSON.parse(localStorage.getItem(\"tasks-list\"));\n    let storeTask = JSON.parse(localStorage.getItem(\"tasks\"));\n    \n    if(!storeTask || !storeTaskList){\n      \n      initialTaskLists.map(item => {\n        initialTasks.map(task => {\n          if(task.status === item.id){\n            item.tasks.push(task);\n          }\n        })\n      }) \n\n      return{\n        ...state,\n        taskList:initialTaskLists ,\n        allTasks:initialTasks\n      }\n    }\n    else{\n      return{\n        ...state,\n        taskList: storeTaskList,\n        allTasks: storeTask\n      }\n      \n    }\n  },\n  \n  [types.ADD_TASK]: (state, { title, id }) => {\n    \n    const allTasks = [...state.allTasks];\n    const taskList = [...state.taskList];\n    if (title!== undefined && title !=='')\n    {\n      allTasks.push({\n        id : state.allTasks.length,\n        title: title,\n        status: id\n      })\n  \n      taskList.map(item => {\n        if(item.id === id){\n          item.tasks.push({\n            id : state.allTasks.length,\n            title: title,\n            status: id\n          })\n        }\n      })\n    }\n\n    return{\n      ...state,\n      taskList : taskList,\n      allTasks : allTasks\n    }\n  },\n\n  [types.CREATE_NEW_COLLUM] : (state, {title}) => {\n    \n    const taskListUpdate = [...state.taskList]\n    let id = state.taskList.length\n    let taskTitle = title\n\n    taskListUpdate.push({\n        id:id,\n        title:taskTitle,\n        tasks:[]\n      })\n    return{\n      ...state,\n      taskList: taskListUpdate,\n    }\n  },\n\n  [types.CHANGE_TASK] : (state , {columnId, id}) =>{\n    const allTasks = [...state.allTasks];\n    const taskList = [...state.taskList];\n    \n    let targetTask\n\n    allTasks.map(task => { \n      if(task.id === parseInt(id)){\n        targetTask = task\n        task.status = parseInt(columnId)        \n      }\n    });\n    \n\n\n    taskList.map(item => {\n      if (item.id === parseInt(columnId)){\n        item.tasks.push(targetTask)\n      }\n    })\n    taskList.map(item => {\n      if (item.id !== parseInt(columnId)){\n        item.tasks = item.tasks.filter(task  => task.id !== targetTask.id)\n      }\n    })\n    \n    console.log(taskList);\n    return{\n      ...state,\n      allTasks:allTasks,\n      taskList:taskList\n    }\n  },\n\n  [types.DRAG_ITEM_TO_COLUMN] : (state, {columnId, taskId}) => {\n  \n    let allTasks = [...state.allTasks]\n    let taskList = [...state.taskList]\n    let targetTaskList\n    let targetTask\n\n    console.log('before', allTasks);\n\n    allTasks.map(task => {\n      if(task.id === parseInst(taskId)){\n        task.status = parseInt(columnId)\n        return targetTask = task\n      }\n    })\n    console.log('targetTask', targetTask);\n    \n    taskList.map(item=>{\n      if(item.id === parseInt(columnId)){\n        return targetTaskList = item.tasks\n      }\n    })\n    console.log('targetTaskList', targetTaskList);\n    \n    let filterList = targetTaskList.filter(task => task.id !== parseInst(taskId))\n    \n    taskList.map(item=>{\n      if(item.id === parseInt(columnId)){\n        return item.tasks = filterList\n      }else{\n        item.tasks = []\n        allTasks.map(task=>{\n          if(task.status === item.id){\n            item.tasks.push(task)\n          }\n        })\n      }\n    })\n    console.log('taskList UPD',taskList);\n    \n\n    console.log('after',allTasks);\n    console.log('filter', filterList);\n    \n    \n    return{\n      ...state,\n      allTasks\n    }\n  },\n  [types.SWAP] : (state, {columnID, taskId}) =>{\n  \n    let allTasks = [...state.allTasks]\n    let taskList = [...state.taskList]\n    let targetTaskList\n    let targetTask\n\n    console.log('before', allTasks);\n\n    allTasks.map(task => {\n      if(task.id === taskId){\n        task.status = columnID+1\n        return targetTask = task\n      }\n    })\n    console.log('targetTask', targetTask);\n    \n    taskList.map(item=>{\n      if(item.id === columnID){\n        return targetTaskList = item.tasks\n      }\n    })\n    console.log('targetTaskList', targetTaskList);\n    \n    let filterList = targetTaskList.filter(task => task.id !== taskId)\n    \n    taskList.map(item=>{\n      if(item.id === columnID){\n        return item.tasks = filterList\n      }else{\n        item.tasks = []\n        allTasks.map(task=>{\n          if(task.status === item.id){\n            item.tasks.push(task)\n          }\n        })\n      }\n    })\n    console.log('taskList UPD',taskList);\n    \n\n    console.log('after',allTasks);\n    console.log('filter', filterList);\n    \n    \n    return{\n      ...state,\n      allTasks\n    }\n  }\n});\n\nexport default taskReducer;"]},"metadata":{},"sourceType":"module"}