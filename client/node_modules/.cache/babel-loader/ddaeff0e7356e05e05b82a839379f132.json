{"ast":null,"code":"import _slicedToArray from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/evgeny/Public/reduxtraine/my-app/src/components/Search/Search.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport Info from \"../Info/Info\";\nimport \"./search_style.css\";\nimport { find, sort } from \"../../state/ducks/search/actions\";\n\nconst Search = ({\n  contacts,\n  findItems,\n  sort,\n  find\n}) => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        contactName = _useState2[0],\n        setContactName = _useState2[1]; // const [findItemName, setFindItemName] = useState(findItems);\n  // useEffect(() => {\n  //   setFindItemName(findItems);\n  // }, [findItems]);\n\n\n  const inputHandle = e => {\n    setContactName(e.target.value); // sort(contacts);\n\n    find(e.target.value); // contacts.forEach(item => {\n    //   if (item.name && item.name.includes(`${e.target.value}`)) {\n    //     setFindItems(findItems.push(item.name));\n    //   }\n    //   return setFindItems([]);\n    // });\n    // console.log(findItems);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"search-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Info, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    name: \"contactName\",\n    placeholder: \"Contact\",\n    value: contactName,\n    onChange: inputHandle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), findItems.map(el => React.createElement(\"p\", {\n    key: el.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Your find :\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), el.name)));\n};\n\nconst mapStateToProps = ({\n  search: {\n    contacts,\n    findItems\n  }\n}) => ({\n  contacts,\n  findItems\n});\n\nconst mapDispatchToProps = {\n  find,\n  sort\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/components/Search/Search.jsx"],"names":["React","useState","useEffect","connect","Info","find","sort","Search","contacts","findItems","contactName","setContactName","inputHandle","e","target","value","map","el","id","name","mapStateToProps","search","mapDispatchToProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAO,oBAAP;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,kCAA3B;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,SAAZ;AAAuBH,EAAAA,IAAvB;AAA6BD,EAAAA;AAA7B,CAAD,KAAyC;AAAA,oBAChBJ,QAAQ,CAAC,EAAD,CADQ;AAAA;AAAA,QAC/CS,WAD+C;AAAA,QAClCC,cADkC,kBAGtD;AAEA;AACA;AACA;;;AAEA,QAAMC,WAAW,GAAGC,CAAC,IAAI;AACvBF,IAAAA,cAAc,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd,CADuB,CAGvB;;AAEAV,IAAAA,IAAI,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAJ,CALuB,CAOvB;AACA;AACA;AACA;AACA;AACA;AAEA;AACD,GAfD;;AAiBA,SACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,aADP;AAEE,IAAA,WAAW,EAAC,SAFd;AAGE,IAAA,KAAK,EAAEL,WAHT;AAIE,IAAA,QAAQ,EAAEE,WAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAYGH,SAAS,CAACO,GAAV,CAAcC,EAAE,IACf;AAAG,IAAA,GAAG,EAAEA,EAAE,CAACC,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADb,EAEGD,EAAE,CAACE,IAFN,CADD,CAZH,CADF;AAqBD,CA/CD;;AAiDA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,MAAM,EAAE;AAAEb,IAAAA,QAAF;AAAYC,IAAAA;AAAZ;AAAV,CAAD,MAA0C;AAChED,EAAAA,QADgE;AAEhEC,EAAAA;AAFgE,CAA1C,CAAxB;;AAKA,MAAMa,kBAAkB,GAAG;AAAEjB,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAA3B;AAEA,eAAeH,OAAO,CAACiB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cf,MAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport Info from \"../Info/Info\";\nimport \"./search_style.css\";\nimport { find, sort } from \"../../state/ducks/search/actions\";\n\nconst Search = ({ contacts, findItems, sort, find }) => {\n  const [contactName, setContactName] = useState(\"\");\n\n  // const [findItemName, setFindItemName] = useState(findItems);\n\n  // useEffect(() => {\n  //   setFindItemName(findItems);\n  // }, [findItems]);\n\n  const inputHandle = e => {\n    setContactName(e.target.value);\n\n    // sort(contacts);\n\n    find(e.target.value);\n\n    // contacts.forEach(item => {\n    //   if (item.name && item.name.includes(`${e.target.value}`)) {\n    //     setFindItems(findItems.push(item.name));\n    //   }\n    //   return setFindItems([]);\n    // });\n\n    // console.log(findItems);\n  };\n\n  return (\n    <div className=\"search-container\">\n      <Info />\n      <div className=\"search\">\n        <input\n          name=\"contactName\"\n          placeholder=\"Contact\"\n          value={contactName}\n          onChange={inputHandle}\n        />\n      </div>\n      <hr />\n      <br />\n      {findItems.map(el => (\n        <p key={el.id}>\n          Your find :<br></br>\n          {el.name}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ search: { contacts, findItems } }) => ({\n  contacts,\n  findItems\n});\n\nconst mapDispatchToProps = { find, sort };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n"]},"metadata":{},"sourceType":"module"}