{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialTasks from '../../../api/tasks';\nimport initialTaskLists from \"../../../api/taskList\";\nconst initialState = {\n  taskList: [],\n  allTasks: []\n};\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.INIT_TASKS]: state => {\n    let storeTaskList = JSON.parse(localStorage.getItem(\"tasks-list\"));\n    let storeTask = JSON.parse(localStorage.getItem(\"tasks\"));\n\n    if (!storeTask || !storeTaskList) {\n      initialTaskLists.map(item => {\n        initialTasks.map(task => {\n          if (task.status === item.id) {\n            item.tasks.push(task);\n          }\n        });\n      });\n      return _objectSpread({}, state, {\n        taskList: initialTaskLists,\n        allTasks: initialTasks\n      });\n    } else {\n      return _objectSpread({}, state, {\n        taskList: storeTaskList,\n        allTasks: storeTask\n      });\n    }\n  },\n  [types.ADD_TASK]: (state, {\n    title,\n    id\n  }) => {\n    const allTasks = [...state.allTasks];\n    const taskList = [...state.taskList];\n\n    if (title !== undefined && title !== '') {\n      allTasks.push({\n        id: state.allTasks.length,\n        title: title,\n        status: id\n      });\n      taskList.map(item => {\n        if (item.id === id) {\n          item.tasks.push({\n            id: state.allTasks.length,\n            title: title,\n            status: id\n          });\n        }\n      });\n    }\n\n    return _objectSpread({}, state, {\n      taskList: taskList,\n      allTasks: allTasks\n    });\n  },\n  [types.CREATE_NEW_COLLUM]: (state, {\n    title\n  }) => {\n    const taskListUpdate = [...state.taskList];\n    let id = state.taskList.length;\n    let taskTitle = title;\n    taskListUpdate.push({\n      id: id,\n      title: taskTitle,\n      tasks: []\n    });\n    return _objectSpread({}, state, {\n      taskList: taskListUpdate\n    });\n  },\n  [types.CHANGE_TASK]: (state, {\n    columnId,\n    id\n  }) => {\n    const allTasks = [...state.allTasks];\n    const taskList = [...state.taskList];\n    let targetTask;\n    allTasks.map(task => {\n      if (task.id === parseInt(id)) {\n        targetTask = task;\n        task.status = parseInt(columnId);\n      }\n    });\n    taskList.map(item => {\n      if (item.id === parseInt(columnId)) {\n        item.tasks.push(targetTask);\n      }\n    });\n    taskList.map(item => {\n      if (item.id !== parseInt(columnId)) {\n        item.tasks = item.tasks.filter(task => task.id !== targetTask.id);\n      }\n    });\n    console.log(taskList);\n    return _objectSpread({}, state, {\n      allTasks: allTasks,\n      taskList: taskList\n    });\n  },\n  [types.DRAG_ITEM_TO_COLUMN]: (state, {\n    columnId,\n    taskId\n  }) => {\n    const taskListUPD = [...state.taskList];\n    const allTasksUPD = [...state.allTasks];\n    let taskIndexToDelete;\n    let targetTask;\n    allTasksUPD.map(task => {\n      if (task.id === parseInt(taskId)) {\n        targetTask = task;\n        task.status = parseInt(columnId);\n      }\n    });\n    taskListUPD.map(item => {\n      if (item.id === parseInt(columnId)) {\n        item.tasks.push(targetTask);\n      }\n\n      item.tasks.map((task, index) => {\n        if (task.id === targetTask.id) {\n          taskIndexToDelete = index;\n          item.tasks.splice(taskIndexToDelete, 1);\n        }\n      }); // if(taskIndexToDelete){\n      //   item.tasks.splice(taskIndexToDelete, 1)\n      // }\n    });\n    console.log(taskListUPD);\n    return _objectSpread({}, state, {\n      taskList: taskListUPD,\n      allTasks: allTasksUPD\n    });\n  },\n  [types.SWAP]: (state, {\n    columnID,\n    taskId\n  }) => {\n    let allTasks = [...state.allTasks];\n    let taskList = [...state.taskList];\n    let targetTaskList;\n    let targetTask;\n    console.log('before', allTasks);\n    allTasks.map(task => {\n      if (task.id === taskId) {\n        task.status = columnID + 1;\n        return targetTask;\n      }\n    });\n    taskList.map(item => {\n      if (item.id === columnID) {\n        return targetTaskList;\n      }\n    });\n    console.log('after', allTasks);\n    console.log('targetTaskList', targetTaskList);\n    console.log('targetTask', targetTask);\n    return _objectSpread({}, state, {\n      allTasks\n    });\n  }\n});\nexport default taskReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/task/reducers.js"],"names":["types","createReducer","initialTasks","initialTaskLists","initialState","taskList","allTasks","taskReducer","INIT_TASKS","state","storeTaskList","JSON","parse","localStorage","getItem","storeTask","map","item","task","status","id","tasks","push","ADD_TASK","title","undefined","length","CREATE_NEW_COLLUM","taskListUpdate","taskTitle","CHANGE_TASK","columnId","targetTask","parseInt","filter","console","log","DRAG_ITEM_TO_COLUMN","taskId","taskListUPD","allTasksUPD","taskIndexToDelete","index","splice","SWAP","columnID","targetTaskList"],"mappings":"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","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\"\nimport initialTasks from '../../../api/tasks'\nimport initialTaskLists from \"../../../api/taskList\";\n\nconst initialState = {\n  taskList:[],\n  allTasks: []\n}\n\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.INIT_TASKS]: (state) => {\n\n    let storeTaskList = JSON.parse(localStorage.getItem(\"tasks-list\"));\n    let storeTask = JSON.parse(localStorage.getItem(\"tasks\"));\n    \n    if(!storeTask || !storeTaskList){\n      \n      initialTaskLists.map(item => {\n        initialTasks.map(task => {\n          if(task.status === item.id){\n            item.tasks.push(task);\n          }\n        })\n      }) \n\n      return{\n        ...state,\n        taskList:initialTaskLists ,\n        allTasks:initialTasks\n      }\n    }\n    else{\n      return{\n        ...state,\n        taskList: storeTaskList,\n        allTasks: storeTask\n      }\n      \n    }\n  },\n  \n  [types.ADD_TASK]: (state, { title, id }) => {\n    \n    const allTasks = [...state.allTasks];\n    const taskList = [...state.taskList];\n    if (title!== undefined && title !=='')\n    {\n      allTasks.push({\n        id : state.allTasks.length,\n        title: title,\n        status: id\n      })\n  \n      taskList.map(item => {\n        if(item.id === id){\n          item.tasks.push({\n            id : state.allTasks.length,\n            title: title,\n            status: id\n          })\n        }\n      })\n    }\n\n    return{\n      ...state,\n      taskList : taskList,\n      allTasks : allTasks\n    }\n  },\n\n  [types.CREATE_NEW_COLLUM] : (state, {title}) => {\n    \n    const taskListUpdate = [...state.taskList]\n    let id = state.taskList.length\n    let taskTitle = title\n\n    taskListUpdate.push({\n        id:id,\n        title:taskTitle,\n        tasks:[]\n      })\n    return{\n      ...state,\n      taskList: taskListUpdate,\n    }\n  },\n\n  [types.CHANGE_TASK] : (state , {columnId, id}) =>{\n    const allTasks = [...state.allTasks];\n    const taskList = [...state.taskList];\n    \n    let targetTask\n\n    allTasks.map(task => { \n      if(task.id === parseInt(id)){\n        targetTask = task\n        task.status = parseInt(columnId)        \n      }\n    });\n    \n\n\n    taskList.map(item => {\n      if (item.id === parseInt(columnId)){\n        item.tasks.push(targetTask)\n      }\n    })\n    taskList.map(item => {\n      if (item.id !== parseInt(columnId)){\n        item.tasks = item.tasks.filter(task  => task.id !== targetTask.id)\n      }\n    })\n    \n    console.log(taskList);\n    return{\n      ...state,\n      allTasks:allTasks,\n      taskList:taskList\n    }\n  },\n\n  [types.DRAG_ITEM_TO_COLUMN] : (state, {columnId, taskId}) => {\n\n    const taskListUPD = [...state.taskList];\n    const allTasksUPD = [...state.allTasks];\n    \n    let taskIndexToDelete\n    let targetTask\n\n    allTasksUPD.map(task => { \n\n      if(task.id === parseInt(taskId)){\n        targetTask = task\n        task.status = parseInt(columnId)        \n      }\n      \n    });\n\n    taskListUPD.map(item => {\n      if(item.id === parseInt(columnId)){\n        item.tasks.push(targetTask);\n      }\n      item.tasks.map((task, index) => {\n        if(task.id === targetTask.id){\n          taskIndexToDelete = index\n          item.tasks.splice(taskIndexToDelete, 1)\n        }\n      })\n\n      // if(taskIndexToDelete){\n      //   item.tasks.splice(taskIndexToDelete, 1)\n      // }\n\n      \n    })\n\n    console.log(taskListUPD);\n\n    return{\n      ...state,\n      taskList: taskListUPD,\n      allTasks: allTasksUPD\n    }\n  },\n  [types.SWAP] : (state, {columnID, taskId}) =>{\n  \n    let allTasks = [...state.allTasks]\n    let taskList = [...state.taskList]\n    let targetTaskList\n    let targetTask\n\n    console.log('before', allTasks);\n\n    allTasks.map(task => {\n      if(task.id === taskId){\n        task.status = columnID+1\n        return targetTask\n      }\n    })\n    taskList.map(item=>{\n      if(item.id === columnID){\n        return targetTaskList\n      }\n    })\n\n\n    console.log('after',allTasks);\n    console.log('targetTaskList', targetTaskList);\n    console.log('targetTask', targetTask);\n    \n    \n    return{\n      ...state,\n      allTasks\n    }\n  }\n});\n\nexport default taskReducer;"]},"metadata":{},"sourceType":"module"}