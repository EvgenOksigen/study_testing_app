{"ast":null,"code":"import * as types from \"./types\";\nexport const onInit = payload => {\n  return {\n    type: types.INIT,\n    payload\n  };\n};\nexport const initList = () => {};\nexport const initSearch = () => {};\nexport const sort = arr => ({\n  type: types.SORT,\n  payload: arr.sort((a, b) => a.name !== b.name ? a.name < b.name ? -1 : 1 : 0)\n});\nexport const find = payload => ({\n  type: types.FIND,\n  payload\n});\nexport const deleteContact = id => {\n  return {\n    type: types.DELETE_CONTACT,\n    id\n  };\n};\nexport const resetContacts = () => ({\n  type: types.RESET\n});","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/search/actions.js"],"names":["types","onInit","payload","type","INIT","initList","initSearch","sort","arr","SORT","a","b","name","find","FIND","deleteContact","id","DELETE_CONTACT","resetContacts","RESET"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AAGA,OAAO,MAAMC,MAAM,GAAIC,OAAD,IAAa;AACjC,SAAM;AACJC,IAAAA,IAAI,EAAGH,KAAK,CAACI,IADT;AAEJF,IAAAA;AAFI,GAAN;AAID,CALM;AAOP,OAAO,MAAMG,QAAQ,GAAG,MAAK,CAE5B,CAFM;AAGP,OAAO,MAAMC,UAAU,GAAG,MAAK,CAE9B,CAFM;AAGP,OAAO,MAAMC,IAAI,GAAIC,GAAD,KAAU;AAC5BL,EAAAA,IAAI,EAAGH,KAAK,CAACS,IADe;AAE5BP,EAAAA,OAAO,EAAEM,GAAG,CAACD,IAAJ,CAAS,CAACG,CAAD,EAAIC,CAAJ,KAClBD,CAAC,CAACE,IAAF,KAAWD,CAAC,CAACC,IAAb,GAAqBF,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAX,GAAkB,CAAC,CAAnB,GAAuB,CAA5C,GAAiD,CADxC;AAFmB,CAAV,CAAb;AAOP,OAAO,MAAMC,IAAI,GAAIX,OAAD,KAAc;AAChCC,EAAAA,IAAI,EAAEH,KAAK,CAACc,IADoB;AAEhCZ,EAAAA;AAFgC,CAAd,CAAb;AAKP,OAAO,MAAMa,aAAa,GAAIC,EAAD,IAAQ;AAEnC,SAAO;AACLb,IAAAA,IAAI,EAAEH,KAAK,CAACiB,cADP;AAELD,IAAAA;AAFK,GAAP;AAID,CANM;AAQP,OAAO,MAAME,aAAa,GAAG,OAAM;AACjCf,EAAAA,IAAI,EAAEH,KAAK,CAACmB;AADqB,CAAN,CAAtB","sourcesContent":["import * as types from \"./types\";\n\n\nexport const onInit = (payload) => {\n  return{\n    type : types.INIT,\n    payload\n  }\n};\n\nexport const initList = ()=> {\n\n};\nexport const initSearch = ()=> {\n\n};\nexport const sort = (arr) => ({\n  type : types.SORT,\n  payload: arr.sort((a, b) =>\n  a.name !== b.name ? (a.name < b.name ? -1 : 1) : 0)\n});\n\n\nexport const find = (payload) => ({\n  type: types.FIND,\n  payload\n})\n\nexport const deleteContact = (id) => {\n\n  return {\n    type: types.DELETE_CONTACT,\n    id\n  }\n};\n\nexport const resetContacts = ()=> ({\n  type: types.RESET\n});"]},"metadata":{},"sourceType":"module"}