{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialTasks from '../../../api/tasks';\nimport initialTaskLists from \"../../../api/taskList\";\nconst initialState = {\n  taskList: [],\n  allTasks: []\n};\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.INIT_TASKS]: state => {\n    let storeTaskList = JSON.parse(localStorage.getItem(\"tasks-list\"));\n    let storeTask = JSON.parse(localStorage.getItem(\"tasks\"));\n\n    if (!storeTask || !storeTaskList) {\n      /* initialTaskLists.map(item => {\n        initialTasks.map(task => {\n          if(task.status === item.id){\n            item.tasks.push(task);\n          }\n        })\n        console.log(item.tasks);\n      })  */\n      return _objectSpread({}, state, {\n        taskList: initialTaskLists,\n        allTasks: initialTasks\n      });\n    } else {\n      return _objectSpread({}, state, {\n        taskList: storeTaskList,\n        allTasks: storeTask\n      });\n    }\n  },\n  [types.ADD_TASK]: (state, {\n    title,\n    id\n  }) => {\n    const allTasks = [...state.allTasks];\n    const taskList = [...state.taskList];\n    allTasks.push({\n      id: state.allTasks.length,\n      title: title,\n      status: id\n    });\n    taskList.map(item => {\n      if (item.id === id) {\n        item.tasks.push({\n          id: state.allTasks.length,\n          title: title,\n          status: id\n        });\n      }\n    });\n    console.log(taskList[id].tasks);\n    return _objectSpread({}, state, {\n      taskList,\n      allTasks\n    });\n  },\n  [types.CREATE_NEW_COLLUM]: (state, {\n    title\n  }) => {\n    const taskListUpdate = [...state.taskList];\n    let id = state.taskList.length;\n    let taskTitle = title;\n    taskListUpdate.push({\n      id: id,\n      title: taskTitle,\n      tasks: []\n    });\n    return _objectSpread({}, state, {\n      taskList: taskListUpdate\n    });\n  },\n  [types.DRAG_ITEM_TO_COLUMN]: (state, {\n    columnId,\n    taskId\n  }) => {\n    const taskListUPD = [...state.taskList];\n    const allTasksUPD = [...state.allTasks];\n    let taskIndexToDelete;\n    let targetTask;\n    allTasksUPD.map(task => {\n      if (task.id === parseInt(taskId)) {\n        targetTask = task;\n        task.status = parseInt(columnId);\n      }\n    });\n    taskListUPD.map(item => {\n      console.log(item.tasks.filter(task => task !== targetTask));\n      item.tasks.map((task, index) => {\n        if (task.id === targetTask.id) {\n          taskIndexToDelete = index;\n        }\n      });\n\n      if (taskIndexToDelete) {\n        item.tasks.splice(taskIndexToDelete, 1);\n      }\n\n      if (item.id === parseInt(columnId)) {\n        item.tasks.push(targetTask);\n      }\n    });\n    console.log(taskListUPD);\n    return _objectSpread({}, state, {\n      taskList: taskListUPD,\n      allTasks: allTasksUPD\n    });\n  }\n});\nexport default taskReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/task/reducers.js"],"names":["types","createReducer","initialTasks","initialTaskLists","initialState","taskList","allTasks","taskReducer","INIT_TASKS","state","storeTaskList","JSON","parse","localStorage","getItem","storeTask","ADD_TASK","title","id","push","length","status","map","item","tasks","console","log","CREATE_NEW_COLLUM","taskListUpdate","taskTitle","DRAG_ITEM_TO_COLUMN","columnId","taskId","taskListUPD","allTasksUPD","taskIndexToDelete","targetTask","task","parseInt","filter","index","splice"],"mappings":"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","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\"\nimport initialTasks from '../../../api/tasks'\nimport initialTaskLists from \"../../../api/taskList\";\n\nconst initialState = {\n  taskList:[],\n  allTasks: []\n}\n\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.INIT_TASKS]: (state) => {\n\n    let storeTaskList = JSON.parse(localStorage.getItem(\"tasks-list\"));\n    let storeTask = JSON.parse(localStorage.getItem(\"tasks\"));\n    \n    if(!storeTask || !storeTaskList){\n      \n      /* initialTaskLists.map(item => {\n        initialTasks.map(task => {\n          if(task.status === item.id){\n            item.tasks.push(task);\n          }\n        })\n        console.log(item.tasks);\n      })  */\n\n      return{\n        ...state,\n        taskList:initialTaskLists ,\n        allTasks:initialTasks\n      }\n    }\n    else{\n      return{\n        ...state,\n        taskList: storeTaskList,\n        allTasks: storeTask\n      }\n      \n    }\n  },\n  \n  [types.ADD_TASK]: (state, { title, id }) => {\n    \n    const allTasks = [...state.allTasks];\n    const taskList = [...state.taskList];\n    \n    allTasks.push({\n      id : state.allTasks.length,\n      title: title,\n      status: id\n    })\n\n    taskList.map(item => {\n      if(item.id === id){\n        item.tasks.push({\n          id : state.allTasks.length,\n          title: title,\n          status: id\n        })\n      }\n    })\n    console.log(taskList[id].tasks);\n    \n\n    return{\n      ...state,\n      taskList,\n      allTasks\n    }\n  },\n\n\n\n  [types.CREATE_NEW_COLLUM] : (state, {title}) => {\n    \n    const taskListUpdate = [...state.taskList]\n    let id = state.taskList.length\n    let taskTitle = title\n\n    taskListUpdate.push({\n        id:id,\n        title:taskTitle,\n        tasks:[]\n      })\n      \n\n    return{\n      ...state,\n      taskList: taskListUpdate,\n    }\n  },\n\n  [types.DRAG_ITEM_TO_COLUMN] : (state, {columnId, taskId}) => {\n\n    const taskListUPD = [...state.taskList];\n    const allTasksUPD = [...state.allTasks];\n    \n    let taskIndexToDelete\n    let targetTask\n\n    allTasksUPD.map(task => { \n\n      if(task.id === parseInt(taskId)){\n        targetTask = task\n        task.status = parseInt(columnId)        \n      }\n      \n    });\n\n    taskListUPD.map(item => {\n\n      console.log(item.tasks.filter(task=>task!==targetTask));\n      \n      item.tasks.map((task, index) => {\n        if(task.id === targetTask.id){\n          taskIndexToDelete = index\n        }\n      })\n\n      if(taskIndexToDelete){\n        item.tasks.splice(taskIndexToDelete, 1)\n      }\n\n      if(item.id === parseInt(columnId)){\n        item.tasks.push(targetTask);\n      }\n    })\n\n    console.log(taskListUPD);\n\n    return{\n      ...state,\n      taskList: taskListUPD,\n      allTasks: allTasksUPD\n    }\n  } \n});\n\nexport default taskReducer;"]},"metadata":{},"sourceType":"module"}