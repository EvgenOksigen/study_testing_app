{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialTasks from '../../../api/tasks';\nimport initialTaskLists from \"../../../api/taskList\"; // else{\n//   localStorage.setItem('tasks-list', JSON.stringify(initialTaskLists))\n//   localStorage.setItem('tasks', JSON.stringify(initialTasks))\n//   return{\n//     ...state,\n//     taskList: initialTaskLists,\n//     allTasks: initialTasks\n//   }\n// }\n\nconst initialState = {\n  taskList: [],\n  allTasks: []\n};\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.ADD_TASK]: (state, {\n    title,\n    id\n  }) => {\n    const storeTasks = JSON.parse(localStorage.getItem('tasks'));\n    const columns = state.taskList;\n    columns.map(item => {\n      if (item.id === id) {\n        item.tasks.push({\n          id: state.allTasks.length,\n          title: title,\n          status: id\n        });\n      }\n    });\n    storeTasks.push({\n      id: state.allTasks.length,\n      title: title,\n      status: id\n    });\n    localStorage.setItem('tasks', JSON.stringify(storeTasks));\n    return _objectSpread({}, state, {\n      taskList: columns,\n      allTasks: storeTasks\n    });\n  },\n  [types.INIT_TASKS]: (state, {\n    taskList,\n    allTasks\n  }) => {\n    console.log(taskList, allTasks);\n    initialTaskLists.map(item => {\n      initialTasks.map(task => {\n        if (task.status === item.id) {\n          item.tasks.push(task);\n        }\n      });\n      console.log(item.tasks);\n    });\n    return _objectSpread({}, state, {\n      taskList: taskList,\n      allTasks: allTasks\n    });\n  },\n  [types.COMPLETE_TASK]: (state, {\n    id\n  }) => {\n    let allTasksUpdate = [...state.allTasks];\n    allTasksUpdate.map(task => {\n      if (task.id === parseInt(id)) {\n        //&& task.completed===false\n        task.completed = !task.completed;\n      }\n    });\n    localStorage.setItem(\"tasks\", JSON.stringify(allTasksUpdate));\n    return {\n      allTasks: allTasksUpdate\n    };\n  },\n  [types.CREATE_NEW_COLLUM]: (state, {\n    title\n  }) => {\n    const taskListUpdate = state.taskList;\n    let id = state.taskList.length;\n    let taskTitle = title;\n    taskListUpdate.push({\n      id: id,\n      title: taskTitle,\n      tasks: []\n    });\n    localStorage.setItem('tasks-list', JSON.stringify(taskListUpdate));\n    return _objectSpread({}, state, {\n      taskList: taskListUpdate\n    });\n  },\n  [types.DRAG_ITEM_TO_COLUMN]: (state, {\n    columnId,\n    taskId\n  }) => {\n    const taskListUPD = state.taskList;\n    const allTasksUPD = state.allTasks;\n    let taskIndexToDelete;\n    let targetTask;\n    allTasksUPD.map(task => {\n      if (task.id === parseInt(taskId)) {\n        targetTask = task;\n        task.status = parseInt(columnId);\n      }\n    });\n    taskListUPD.map(item => {\n      item.tasks.map((task, index) => {\n        if (task.id === targetTask.id) {\n          taskIndexToDelete = index;\n        }\n      });\n\n      if (taskIndexToDelete) {\n        item.tasks.splice(taskIndexToDelete, 1);\n        console.log(item.tasks);\n      }\n\n      if (item.id === parseInt(columnId)) {\n        item.tasks.push(targetTask);\n      }\n    });\n    console.log(taskListUPD);\n    localStorage.setItem('tasks-list', JSON.stringify(taskListUPD));\n    localStorage.setItem('tasks', JSON.stringify(allTasksUPD));\n    return _objectSpread({}, state, {\n      taskList: taskListUPD,\n      allTasks: allTasksUPD\n    });\n  }\n});\nexport default taskReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/task/reducers.js"],"names":["types","createReducer","initialTasks","initialTaskLists","initialState","taskList","allTasks","taskReducer","ADD_TASK","state","title","id","storeTasks","JSON","parse","localStorage","getItem","columns","map","item","tasks","push","length","status","setItem","stringify","INIT_TASKS","console","log","task","COMPLETE_TASK","allTasksUpdate","parseInt","completed","CREATE_NEW_COLLUM","taskListUpdate","taskTitle","DRAG_ITEM_TO_COLUMN","columnId","taskId","taskListUPD","allTasksUPD","taskIndexToDelete","targetTask","index","splice"],"mappings":"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","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\"\nimport initialTasks from '../../../api/tasks'\nimport initialTaskLists from \"../../../api/taskList\";\n\n// else{\n//   localStorage.setItem('tasks-list', JSON.stringify(initialTaskLists))\n//   localStorage.setItem('tasks', JSON.stringify(initialTasks))\n\n//   return{\n//     ...state,\n//     taskList: initialTaskLists,\n//     allTasks: initialTasks\n//   }\n// }\n\nconst initialState = {\n  taskList:[],\n  allTasks: []\n}\n\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.ADD_TASK]: (state, { title, id }) => {\n    const storeTasks = JSON.parse(localStorage.getItem('tasks'));\n    const columns = state.taskList;\n\n    columns.map(item => {\n      if(item.id === id){\n        item.tasks.push({\n          id : state.allTasks.length,\n          title: title,\n          status: id\n        })\n      }\n    })\n\n    storeTasks.push({\n      id : state.allTasks.length,\n      title: title,\n      status: id\n    })\n\n    localStorage.setItem('tasks', JSON.stringify(storeTasks))\n    \n    return{\n      ...state,\n      taskList: columns,\n      allTasks: storeTasks\n    }\n  },\n\n  [types.INIT_TASKS]: (state, {taskList, allTasks}) => {\n     console.log(taskList, allTasks);\n      initialTaskLists.map(item => {\n        initialTasks.map(task => {\n          if(task.status === item.id){\n            item.tasks.push(task);\n          }\n         })\n         console.log(item.tasks);\n      })\n     \n      return{\n        ...state,\n        taskList:taskList,\n        allTasks: allTasks\n      }\n   \n  },\n\n  [types.COMPLETE_TASK] : (state, {id}) => {\n\n    let allTasksUpdate = [...state.allTasks];\n\n    allTasksUpdate.map(task => {\n      if(task.id === parseInt(id) ){ //&& task.completed===false\n        task.completed = !task.completed\n      }\n    });\n\n    localStorage.setItem(\"tasks\", JSON.stringify(allTasksUpdate))\n\n    return{\n      allTasks: allTasksUpdate\n    }\n  },\n\n  [types.CREATE_NEW_COLLUM] : (state, {title}) => {\n    \n    const taskListUpdate = state.taskList;\n    let id = state.taskList.length\n    let taskTitle = title\n\n    taskListUpdate.push({\n        id:id,\n        title:taskTitle,\n        tasks:[]\n      })\n      \n      localStorage.setItem('tasks-list', JSON.stringify(taskListUpdate))\n\n    return{\n      ...state,\n      taskList: taskListUpdate,\n    }\n  },\n\n  [types.DRAG_ITEM_TO_COLUMN] : (state, {columnId, taskId}) => {\n\n    const taskListUPD = state.taskList;\n    const allTasksUPD = state.allTasks;\n    \n    let taskIndexToDelete\n    let targetTask\n\n    allTasksUPD.map(task => { \n      if(task.id === parseInt(taskId)){\n        targetTask = task\n        task.status = parseInt(columnId)        \n      }\n    });\n\n    taskListUPD.map(item => {\n      item.tasks.map((task, index) => {\n        if(task.id === targetTask.id){\n          taskIndexToDelete = index\n        }\n      })\n      if(taskIndexToDelete){\n        item.tasks.splice(taskIndexToDelete, 1)\n        console.log(item.tasks);\n      }\n      if(item.id === parseInt(columnId)){\n        item.tasks.push(targetTask);\n      }\n    })\n\n    console.log(taskListUPD);\n\n    localStorage.setItem('tasks-list', JSON.stringify(taskListUPD));\n    localStorage.setItem('tasks', JSON.stringify(allTasksUPD))\n\n\n    return{\n      ...state,\n      taskList: taskListUPD,\n      allTasks: allTasksUPD\n    }\n  } \n});\n\nexport default taskReducer;"]},"metadata":{},"sourceType":"module"}