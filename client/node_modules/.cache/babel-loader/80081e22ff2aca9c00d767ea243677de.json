{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from \"../../../api/contacts\";\nconst initialState = {\n  data: [],\n  findItems: []\n};\nconst startReducer = createReducer(initialState)({\n  //\n  [types.INIT_CONTACTS]: (state, {\n    data\n  }) => {\n    return _objectSpread({}, state, {\n      data,\n      findItems: data.map(el => el.name).sort()\n    });\n  },\n  [types.SORT]: (state, {\n    payload\n  }) => {\n    console.log(payload);\n    let data = state.data.sort((a, b) => a.name !== b.name ? a.name < b.name ? -1 : 1 : 0);\n    return _objectSpread({}, state, {\n      data\n    });\n  },\n  [types.FIND]: (state, {\n    payload\n  }) => {\n    let findItems = [];\n    let regExp = new RegExp(`${payload}`, 'gi');\n    state.data.forEach(item => {\n      if (item.name.match(regExp)) {\n        findItems.push(item.name);\n      }\n    });\n    return _objectSpread({}, state, {\n      findItems\n    });\n  },\n  [types.DELETE_CONTACT]: (state, {\n    id\n  }) => {\n    const contactListAfterDelete = [...state.data];\n    let indexOfDelete;\n    contactListAfterDelete.forEach((contact, index) => {\n      if (contact.id === id) {\n        indexOfDelete = index;\n      }\n    });\n    contactListAfterDelete.splice(indexOfDelete, 1);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListAfterDelete));\n    return _objectSpread({}, state, {\n      findItems: contactListAfterDelete.map(item => item.name),\n      data: contactListAfterDelete\n    });\n  },\n  [types.RESET]: state => {\n    localStorage.setItem('contacts', JSON.stringify(initialContacts));\n    return _objectSpread({}, state, {\n      findItems: initialContacts.map(item => item.name),\n      data: initialContacts\n    });\n  }\n});\nexport default startReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/search/reducers.js"],"names":["types","createReducer","initialContacts","initialState","data","findItems","startReducer","INIT_CONTACTS","state","map","el","name","sort","SORT","payload","console","log","a","b","FIND","regExp","RegExp","forEach","item","match","push","DELETE_CONTACT","id","contactListAfterDelete","indexOfDelete","contact","index","splice","localStorage","setItem","JSON","stringify","RESET"],"mappings":"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","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from \"../../../api/contacts\";\n\nconst initialState = {\n  data: [], \n  findItems: [] \n}\n\nconst startReducer = createReducer(initialState)({\n //\n [types.INIT_CONTACTS]: (state, {data}) => {\n  return{\n    ...state,\n    data,\n    findItems: data.map(el=>el.name).sort()\n  }\n},\n\n  [types.SORT]: (state, {payload}) => {   \n    console.log(payload)\n\n    let data = state.data.sort((a, b) =>\n        a.name !== b.name ? (a.name < b.name ? -1 : 1) : 0)\n    return{\n      ...state,\n      data\n    }\n  },\n\n  [types.FIND]: (state, {payload}) => {\n      let findItems = []\n\n      let regExp = new RegExp(`${payload}`, 'gi')\n\n      state.data.forEach(item => {\n      if (item.name.match(regExp)) {\n        findItems.push(item.name);\n      }\n    });\n\n    return{\n      ...state,\n      findItems\n    }\n  },\n\n  [types.DELETE_CONTACT]: (state, {id}) => {\n\n    const contactListAfterDelete = [...state.data];\n\n    let indexOfDelete;\n\n    contactListAfterDelete.forEach((contact, index) => {\n      if(contact.id === id ){\n        indexOfDelete = index;\n      }\n    })\n\n    contactListAfterDelete.splice(indexOfDelete,1);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListAfterDelete))\n    \n    return{\n      ...state,\n      findItems: contactListAfterDelete.map(item=>item.name),\n      data: contactListAfterDelete\n    }\n  },\n\n  [types.RESET] : (state) => {\n\n    localStorage.setItem('contacts', JSON.stringify(initialContacts));\n    \n    return{\n      ...state,\n      findItems:initialContacts.map(item=>item.name),\n      data: initialContacts\n    }\n  }\n\n});\n\nexport default startReducer;"]},"metadata":{},"sourceType":"module"}