{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from \"../../../api/contacts\";\nconst initialState = {\n  data: [],\n  findItems: []\n};\nconst startReducer = createReducer(initialState)({\n  //\n  [types.INIT_CONTACTS]: (state, {\n    data\n  }) => {\n    return _objectSpread({}, state, {\n      data,\n      findItems: data.map(el => el.name).sort()\n    });\n  },\n  [types.SORT]: state => {\n    let data = state.data.sort((a, b) => a.name !== b.name ? a.name < b.name ? -1 : 1 : 0);\n    return _objectSpread({}, state, {\n      data\n    });\n  },\n  [types.FIND]: (state, {\n    payload\n  }) => {\n    let findItems = [];\n    let regExp = new RegExp(`${payload}`, 'gi');\n    state.data.forEach(contact => {\n      if (contact.name.match(regExp)) {\n        findItems.push(contact.name);\n      }\n    });\n    return _objectSpread({}, state, {\n      findItems\n    });\n  },\n  [types.DELETE_CONTACT]: (state, {\n    id\n  }) => {\n    const contactListAfterDelete = [...state.data];\n    let indexOfDelete;\n    contactListAfterDelete.forEach((contact, index) => {\n      if (contact.id === id) {\n        indexOfDelete = index;\n      }\n    });\n    contactListAfterDelete.splice(indexOfDelete, 1);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListAfterDelete));\n    return _objectSpread({}, state, {\n      findItems: contactListAfterDelete.map(item => item.name),\n      data: contactListAfterDelete\n    });\n  },\n  [types.RESET]: state => {\n    localStorage.setItem('contacts', JSON.stringify(initialContacts.sort((a, b) => a.name !== b.name ? a.name < b.name ? -1 : 1 : 0)));\n    return _objectSpread({}, state, {\n      findItems: initialContacts.map(item => item.name).sort(),\n      data: initialContacts\n    });\n  },\n  [types.EDIT]: (state, {\n    id\n  }) => {\n    let contactListToEdit = [...state.data];\n    contactListToEdit.forEach(contact => {\n      if (contact.id === id) {\n        contact.edit = !contact.edit;\n      }\n    });\n    contactListToEdit.sort((a, b) => a.name !== b.name ? a.name < b.name ? -1 : 1 : 0);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListToEdit));\n    return _objectSpread({}, state, {\n      data: contactListToEdit,\n      findItems: contactListToEdit.map(el => el.name).sort()\n    });\n  },\n  [types.EDIT_CONTACT]: (state, {\n    id,\n    value,\n    field\n  }) => {\n    let onlyNumber = new RegExp('\\\\d', 'g');\n    console.log(value.match(onlyNumber));\n    let data = [];\n    const contactListAfterEdit = [...state.data];\n\n    if (field === 'n') {\n      contactListAfterEdit.forEach(contact => {\n        if (contact.id === id) {\n          contact.name = value;\n        }\n      });\n    } else if (field === 'p') {\n      contactListAfterEdit.forEach(contact => {\n        if (contact.id === id) {\n          contact.phoneNumber = value.match(onlyNumber);\n          console.log(parseInt(contact.phoneNumber.toLocaleString().replace(/[\\s.,%]/g, '')));\n          debugger;\n        }\n      });\n    }\n\n    data = contactListAfterEdit;\n    localStorage.setItem(\"contacts\", JSON.stringify(data));\n    return _objectSpread({}, state);\n  }\n});\nexport default startReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/search/reducers.js"],"names":["types","createReducer","initialContacts","initialState","data","findItems","startReducer","INIT_CONTACTS","state","map","el","name","sort","SORT","a","b","FIND","payload","regExp","RegExp","forEach","contact","match","push","DELETE_CONTACT","id","contactListAfterDelete","indexOfDelete","index","splice","localStorage","setItem","JSON","stringify","item","RESET","EDIT","contactListToEdit","edit","EDIT_CONTACT","value","field","onlyNumber","console","log","contactListAfterEdit","phoneNumber","parseInt","toLocaleString","replace"],"mappings":"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","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from \"../../../api/contacts\";\n\nconst initialState = {\n  data: [], \n  findItems: [] \n}\n\nconst startReducer = createReducer(initialState)({\n //\n [types.INIT_CONTACTS]: (state, {data}) => {\n  return{\n    ...state,\n    data,\n    findItems: data.map(el=>el.name).sort()\n  }\n},\n\n  [types.SORT]: (state) => {   \n\n    let data = state.data.sort((a, b) =>\n        a.name !== b.name ? (a.name < b.name ? -1 : 1) : 0)\n    return{\n      ...state,\n      data\n    }\n  },\n\n  [types.FIND]: (state, {payload}) => {\n      let findItems = []\n\n      let regExp = new RegExp(`${payload}`, 'gi')\n\n      state.data.forEach(contact => {\n      if (contact.name.match(regExp)) {\n        findItems.push(contact.name);\n      }\n    });\n\n    return{\n      ...state,\n      findItems\n    }\n  },\n\n  [types.DELETE_CONTACT]: (state, {id}) => {\n\n    const contactListAfterDelete = [...state.data];\n\n    let indexOfDelete;\n\n    contactListAfterDelete.forEach((contact, index) => {\n      if(contact.id === id ){\n        indexOfDelete = index;\n      }\n    })\n\n    contactListAfterDelete.splice(indexOfDelete,1);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListAfterDelete))\n    \n    return{\n      ...state,\n      findItems: contactListAfterDelete.map(item=>item.name),\n      data: contactListAfterDelete\n    }\n  },\n\n  [types.RESET] : (state) => {\n\n    localStorage.setItem('contacts', JSON.stringify(initialContacts.sort((a, b) =>\n    a.name !== b.name ? (a.name < b.name ? -1 : 1) : 0)));\n    \n    return{\n      ...state,\n      findItems:initialContacts.map(item=>item.name).sort(),\n      data: initialContacts\n    }\n  }, \n\n  [types.EDIT] : (state, {id}) => {\n    let contactListToEdit = [...state.data];\n\n    contactListToEdit.forEach(contact => {\n      if(contact.id === id){\n        contact.edit = !contact.edit\n      }\n     });\n\n     contactListToEdit.sort((a, b) => a.name !== b.name ? (a.name < b.name ? -1 : 1) : 0);\n\n     localStorage.setItem(\"contacts\", JSON.stringify(contactListToEdit))\n\n    return{\n      ...state,\n      data : contactListToEdit,\n      findItems : contactListToEdit.map(el=>el.name).sort()\n    }\n  },\n\n  [types.EDIT_CONTACT] : (state, {id, value, field}) => {\n\n    let onlyNumber = new RegExp('\\\\d', 'g')\n\n    console.log(value.match(onlyNumber));\n\n    \n    let data = [];\n    \n    const contactListAfterEdit = [...state.data];\n\n    if (field === 'n'){\n      contactListAfterEdit.forEach(contact => {\n        if(contact.id === id){  \n          contact.name = value\n        }});\n    }else if (field === 'p'){\n      contactListAfterEdit.forEach(contact => {\n        if(contact.id === id){\n          contact.phoneNumber = value.match(onlyNumber);\n          console.log(parseInt(contact.phoneNumber.toLocaleString().replace(/[\\s.,%]/g, '')))\n          debugger\n        }});\n    }\n    data = contactListAfterEdit;\n    \n   localStorage.setItem(\"contacts\", JSON.stringify(data));\n\n    return{\n      ...state,\n      // data : contactListAfterEdit\n    }\n  }\n\n\n});\n\nexport default startReducer;"]},"metadata":{},"sourceType":"module"}