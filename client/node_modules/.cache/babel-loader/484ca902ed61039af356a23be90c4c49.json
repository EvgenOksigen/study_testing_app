{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from \"../../../api/contacts\";\nconst initialState = {\n  contacts: [],\n  //data\n  findItems: []\n};\nconst startReducer = createReducer(initialState)({\n  [types.SORT]: (state, {\n    payload\n  }) => {\n    return _objectSpread({}, state, {\n      contacts: payload\n    });\n  },\n  //\n  [types.INIT]: (state, {\n    contacts\n  }) => {\n    return _objectSpread({}, state, {\n      contacts\n    });\n  },\n  [types.FIND]: (state, {\n    payload\n  }) => {\n    let findItems = [];\n    let regExp = new RegExp(`${payload}`, 'gi');\n    state.contacts.forEach(item => {\n      if (item.name.match(regExp)) {\n        findItems.push(item.name);\n      }\n    });\n    return _objectSpread({}, state, {\n      findItems\n    });\n  },\n  [types.DELETE_CONTACT]: (state, {\n    id\n  }) => {\n    const contactListAfterDelete = [...state.contacts];\n    let indexOfDelete;\n    contactListAfterDelete.forEach((contact, index) => {\n      if (contact.id === id) {\n        indexOfDelete = index;\n      }\n    });\n    contactListAfterDelete.splice(indexOfDelete, 1);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListAfterDelete));\n    return _objectSpread({}, state, {\n      findItems: contactListAfterDelete.map(item => item.name),\n      contacts: contactListAfterDelete\n    });\n  },\n  [types.RESET]: state => {\n    localStorage.setItem('contacts', JSON.stringify(initialContacts));\n    return _objectSpread({}, state, {\n      findItems: initialContacts.map(item => item.name),\n      contacts: initialContacts\n    });\n  }\n});\nexport default startReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/search/reducers.js"],"names":["types","createReducer","initialContacts","initialState","contacts","findItems","startReducer","SORT","state","payload","INIT","FIND","regExp","RegExp","forEach","item","name","match","push","DELETE_CONTACT","id","contactListAfterDelete","indexOfDelete","contact","index","splice","localStorage","setItem","JSON","stringify","map","RESET"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AAIA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AACL;AACdC,EAAAA,SAAS,EAAE;AAFQ,CAArB;AAKA,MAAMC,YAAY,GAAGL,aAAa,CAACE,YAAD,CAAb,CAA4B;AAE/C,GAACH,KAAK,CAACO,IAAP,GAAc,CAACC,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAsB;AAClC,6BACKD,KADL;AAEEJ,MAAAA,QAAQ,EAAEK;AAFZ;AAID,GAP8C;AAQ7C;AACA,GAACT,KAAK,CAACU,IAAP,GAAc,CAACF,KAAD,EAAQ;AAACJ,IAAAA;AAAD,GAAR,KAAuB;AAEnC,6BACKI,KADL;AAEEJ,MAAAA;AAFF;AAID,GAf4C;AAiB/C,GAACJ,KAAK,CAACW,IAAP,GAAc,CAACH,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAsB;AAChC,QAAIJ,SAAS,GAAG,EAAhB;AAEA,QAAIO,MAAM,GAAG,IAAIC,MAAJ,CAAY,GAAEJ,OAAQ,EAAtB,EAAyB,IAAzB,CAAb;AAEAD,IAAAA,KAAK,CAACJ,QAAN,CAAeU,OAAf,CAAuBC,IAAI,IAAI;AAC/B,UAAIA,IAAI,CAACC,IAAL,CAAUC,KAAV,CAAgBL,MAAhB,CAAJ,EAA6B;AAC3BP,QAAAA,SAAS,CAACa,IAAV,CAAeH,IAAI,CAACC,IAApB;AACD;AACF,KAJC;AAMF,6BACKR,KADL;AAEEH,MAAAA;AAFF;AAID,GAhC8C;AAkC/C,GAACL,KAAK,CAACmB,cAAP,GAAwB,CAACX,KAAD,EAAQ;AAACY,IAAAA;AAAD,GAAR,KAAiB;AAEvC,UAAMC,sBAAsB,GAAG,CAAC,GAAGb,KAAK,CAACJ,QAAV,CAA/B;AAEA,QAAIkB,aAAJ;AAEAD,IAAAA,sBAAsB,CAACP,OAAvB,CAA+B,CAACS,OAAD,EAAUC,KAAV,KAAoB;AACjD,UAAGD,OAAO,CAACH,EAAR,KAAeA,EAAlB,EAAsB;AACpBE,QAAAA,aAAa,GAAGE,KAAhB;AACD;AACF,KAJD;AAMAH,IAAAA,sBAAsB,CAACI,MAAvB,CAA8BH,aAA9B,EAA4C,CAA5C;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeR,sBAAf,CAAjC;AAEA,6BACKb,KADL;AAEEH,MAAAA,SAAS,EAAEgB,sBAAsB,CAACS,GAAvB,CAA2Bf,IAAI,IAAEA,IAAI,CAACC,IAAtC,CAFb;AAGEZ,MAAAA,QAAQ,EAAEiB;AAHZ;AAKD,GAtD8C;AAwD/C,GAACrB,KAAK,CAAC+B,KAAP,GAAiBvB,KAAD,IAAW;AAEzBkB,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAe3B,eAAf,CAAjC;AAEA,6BACKM,KADL;AAEEH,MAAAA,SAAS,EAACH,eAAe,CAAC4B,GAAhB,CAAoBf,IAAI,IAAEA,IAAI,CAACC,IAA/B,CAFZ;AAGEZ,MAAAA,QAAQ,EAAEF;AAHZ;AAKD;AAjE8C,CAA5B,CAArB;AAqEA,eAAeI,YAAf","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from \"../../../api/contacts\";\n\n\n\nconst initialState = {\n  contacts: [], //data\n  findItems: [] \n}\n\nconst startReducer = createReducer(initialState)({\n\n  [types.SORT]: (state, {payload}) => {    \n    return{\n      ...state,\n      contacts: payload\n    }\n  },\n    //\n    [types.INIT]: (state, {contacts}) => {\n  \n      return{\n        ...state,\n        contacts \n      }\n    },\n\n  [types.FIND]: (state, {payload}) => {\n      let findItems = []\n\n      let regExp = new RegExp(`${payload}`, 'gi')\n\n      state.contacts.forEach(item => {\n      if (item.name.match(regExp)) {\n        findItems.push(item.name);\n      }\n    });\n\n    return{\n      ...state,\n      findItems\n    }\n  },\n\n  [types.DELETE_CONTACT]: (state, {id}) => {\n\n    const contactListAfterDelete = [...state.contacts];\n\n    let indexOfDelete;\n\n    contactListAfterDelete.forEach((contact, index) => {\n      if(contact.id === id ){\n        indexOfDelete = index;\n      }\n    })\n\n    contactListAfterDelete.splice(indexOfDelete,1);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListAfterDelete))\n    \n    return{\n      ...state,\n      findItems: contactListAfterDelete.map(item=>item.name),\n      contacts: contactListAfterDelete\n    }\n  },\n\n  [types.RESET] : (state) => {\n\n    localStorage.setItem('contacts', JSON.stringify(initialContacts));\n    \n    return{\n      ...state,\n      findItems:initialContacts.map(item=>item.name),\n      contacts: initialContacts\n    }\n  }\n\n});\n\nexport default startReducer;"]},"metadata":{},"sourceType":"module"}