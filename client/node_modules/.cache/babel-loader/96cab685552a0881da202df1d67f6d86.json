{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from \"../../../api/contacts\";\nconst initialState = {\n  data: [],\n  //data\n  findItems: []\n};\nconst startReducer = createReducer(initialState)({\n  //\n  [types.INIT]: (state, {\n    data\n  }) => {\n    const dataStore = JSON.parse(localStorage.getItem(''));\n    let localContactsData = JSON.parse;\n    return _objectSpread({}, state, {\n      data\n    });\n  },\n  [types.SORT]: (state, {\n    payload\n  }) => {\n    return _objectSpread({}, state, {\n      data: payload\n    });\n  },\n  [types.FIND]: (state, {\n    payload\n  }) => {\n    let findItems = [];\n    let regExp = new RegExp(`${payload}`, 'gi');\n    state.data.forEach(item => {\n      if (item.name.match(regExp)) {\n        findItems.push(item.name);\n      }\n    });\n    return _objectSpread({}, state, {\n      findItems\n    });\n  },\n  [types.DELETE_CONTACT]: (state, {\n    id\n  }) => {\n    const contactListAfterDelete = [...state.data];\n    let indexOfDelete;\n    contactListAfterDelete.forEach((contact, index) => {\n      if (contact.id === id) {\n        indexOfDelete = index;\n      }\n    });\n    contactListAfterDelete.splice(indexOfDelete, 1);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListAfterDelete));\n    return _objectSpread({}, state, {\n      findItems: contactListAfterDelete.map(item => item.name),\n      data: contactListAfterDelete\n    });\n  },\n  [types.RESET]: state => {\n    localStorage.setItem('contacts', JSON.stringify(initialContacts));\n    return _objectSpread({}, state, {\n      findItems: initialContacts.map(item => item.name),\n      data: initialContacts\n    });\n  }\n});\nexport default startReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/search/reducers.js"],"names":["types","createReducer","initialContacts","initialState","data","findItems","startReducer","INIT","state","dataStore","JSON","parse","localStorage","getItem","localContactsData","SORT","payload","FIND","regExp","RegExp","forEach","item","name","match","push","DELETE_CONTACT","id","contactListAfterDelete","indexOfDelete","contact","index","splice","setItem","stringify","map","RESET"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AACT;AACVC,EAAAA,SAAS,EAAE;AAFQ,CAArB;AAKA,MAAMC,YAAY,GAAGL,aAAa,CAACE,YAAD,CAAb,CAA4B;AAChD;AACA,GAACH,KAAK,CAACO,IAAP,GAAc,CAACC,KAAD,EAAQ;AAACJ,IAAAA;AAAD,GAAR,KAAmB;AAChC,UAAMK,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,EAArB,CAAX,CAAlB;AACA,QAAIC,iBAAiB,GAAGJ,IAAI,CAACC,KAA7B;AAEA,6BACKH,KADL;AAEEJ,MAAAA;AAFF;AAID,GAVgD;AAY/C,GAACJ,KAAK,CAACe,IAAP,GAAc,CAACP,KAAD,EAAQ;AAACQ,IAAAA;AAAD,GAAR,KAAsB;AAClC,6BACKR,KADL;AAEEJ,MAAAA,IAAI,EAAEY;AAFR;AAID,GAjB8C;AAmB/C,GAAChB,KAAK,CAACiB,IAAP,GAAc,CAACT,KAAD,EAAQ;AAACQ,IAAAA;AAAD,GAAR,KAAsB;AAChC,QAAIX,SAAS,GAAG,EAAhB;AAEA,QAAIa,MAAM,GAAG,IAAIC,MAAJ,CAAY,GAAEH,OAAQ,EAAtB,EAAyB,IAAzB,CAAb;AAEAR,IAAAA,KAAK,CAACJ,IAAN,CAAWgB,OAAX,CAAmBC,IAAI,IAAI;AAC3B,UAAIA,IAAI,CAACC,IAAL,CAAUC,KAAV,CAAgBL,MAAhB,CAAJ,EAA6B;AAC3Bb,QAAAA,SAAS,CAACmB,IAAV,CAAeH,IAAI,CAACC,IAApB;AACD;AACF,KAJC;AAMF,6BACKd,KADL;AAEEH,MAAAA;AAFF;AAID,GAlC8C;AAoC/C,GAACL,KAAK,CAACyB,cAAP,GAAwB,CAACjB,KAAD,EAAQ;AAACkB,IAAAA;AAAD,GAAR,KAAiB;AAEvC,UAAMC,sBAAsB,GAAG,CAAC,GAAGnB,KAAK,CAACJ,IAAV,CAA/B;AAEA,QAAIwB,aAAJ;AAEAD,IAAAA,sBAAsB,CAACP,OAAvB,CAA+B,CAACS,OAAD,EAAUC,KAAV,KAAoB;AACjD,UAAGD,OAAO,CAACH,EAAR,KAAeA,EAAlB,EAAsB;AACpBE,QAAAA,aAAa,GAAGE,KAAhB;AACD;AACF,KAJD;AAMAH,IAAAA,sBAAsB,CAACI,MAAvB,CAA8BH,aAA9B,EAA4C,CAA5C;AACAhB,IAAAA,YAAY,CAACoB,OAAb,CAAqB,UAArB,EAAiCtB,IAAI,CAACuB,SAAL,CAAeN,sBAAf,CAAjC;AAEA,6BACKnB,KADL;AAEEH,MAAAA,SAAS,EAAEsB,sBAAsB,CAACO,GAAvB,CAA2Bb,IAAI,IAAEA,IAAI,CAACC,IAAtC,CAFb;AAGElB,MAAAA,IAAI,EAAEuB;AAHR;AAKD,GAxD8C;AA0D/C,GAAC3B,KAAK,CAACmC,KAAP,GAAiB3B,KAAD,IAAW;AAEzBI,IAAAA,YAAY,CAACoB,OAAb,CAAqB,UAArB,EAAiCtB,IAAI,CAACuB,SAAL,CAAe/B,eAAf,CAAjC;AAEA,6BACKM,KADL;AAEEH,MAAAA,SAAS,EAACH,eAAe,CAACgC,GAAhB,CAAoBb,IAAI,IAAEA,IAAI,CAACC,IAA/B,CAFZ;AAGElB,MAAAA,IAAI,EAAEF;AAHR;AAKD;AAnE8C,CAA5B,CAArB;AAuEA,eAAeI,YAAf","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from \"../../../api/contacts\";\n\nconst initialState = {\n  data: [], //data\n  findItems: [] \n}\n\nconst startReducer = createReducer(initialState)({\n //\n [types.INIT]: (state, {data}) => {\n  const dataStore = JSON.parse(localStorage.getItem(''))\n  let localContactsData = JSON.parse\n\n  return{\n    ...state,\n    data \n  }\n},\n\n  [types.SORT]: (state, {payload}) => {    \n    return{\n      ...state,\n      data: payload\n    }\n  },\n\n  [types.FIND]: (state, {payload}) => {\n      let findItems = []\n\n      let regExp = new RegExp(`${payload}`, 'gi')\n\n      state.data.forEach(item => {\n      if (item.name.match(regExp)) {\n        findItems.push(item.name);\n      }\n    });\n\n    return{\n      ...state,\n      findItems\n    }\n  },\n\n  [types.DELETE_CONTACT]: (state, {id}) => {\n\n    const contactListAfterDelete = [...state.data];\n\n    let indexOfDelete;\n\n    contactListAfterDelete.forEach((contact, index) => {\n      if(contact.id === id ){\n        indexOfDelete = index;\n      }\n    })\n\n    contactListAfterDelete.splice(indexOfDelete,1);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListAfterDelete))\n    \n    return{\n      ...state,\n      findItems: contactListAfterDelete.map(item=>item.name),\n      data: contactListAfterDelete\n    }\n  },\n\n  [types.RESET] : (state) => {\n\n    localStorage.setItem('contacts', JSON.stringify(initialContacts));\n    \n    return{\n      ...state,\n      findItems:initialContacts.map(item=>item.name),\n      data: initialContacts\n    }\n  }\n\n});\n\nexport default startReducer;"]},"metadata":{},"sourceType":"module"}