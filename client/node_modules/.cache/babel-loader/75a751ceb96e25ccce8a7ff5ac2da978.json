{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialTasks from '../../../api/tasks';\nimport initialTaskLists from \"../../../api/taskList\";\nconst initialState = {\n  taskList: [],\n  allTasks: []\n};\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.ADD_TASK]: (state, {\n    title,\n    id\n  }) => {\n    const storeTasks = JSON.parse(localStorage.getItem('tasks'));\n    const columns = state.taskList;\n    columns.map(item => {\n      if (item.id === id) {\n        item.tasks.push({\n          id: state.allTasks.length,\n          title: title,\n          status: id\n        });\n      }\n    });\n    storeTasks.push({\n      id: state.allTasks.length,\n      title: title,\n      status: id\n    });\n    localStorage.setItem('tasks', JSON.stringify(storeTasks));\n    return _objectSpread({}, state, {\n      taskList: columns,\n      allTasks: storeTasks\n    });\n  },\n  [types.INIT_TASKS]: state => {\n    let storeTaskList = JSON.parse(localStorage.getItem(\"tasks-list\"));\n    let storeTask = JSON.parse(localStorage.getItem(\"tasks\"));\n\n    if (storeTask && storeTaskList) {\n      storeTaskList.map(item => {\n        storeTask.map(task => {\n          if (task.status === item.id) {\n            item.tasks.push(task);\n          }\n        });\n        console.log(item.tasks);\n      });\n      return _objectSpread({}, state, {\n        taskList: storeTaskList,\n        allTasks: storeTask\n      });\n    } else {\n      localStorage.setItem('tasks-list', JSON.stringify(initialTaskLists));\n      localStorage.setItem('tasks', JSON.stringify(initialTasks));\n      return _objectSpread({}, state, {\n        taskList: initialTaskLists,\n        allTasks: initialTasks\n      });\n    }\n  },\n  [types.COMPLETE_TASK]: (state, {\n    id\n  }) => {\n    let allTasksUpdate = [...state.allTasks];\n    allTasksUpdate.map(task => {\n      if (task.id === parseInt(id)) {\n        //&& task.completed===false\n        task.completed = !task.completed;\n      }\n    });\n    localStorage.setItem(\"tasks\", JSON.stringify(allTasksUpdate));\n    return {\n      allTasks: allTasksUpdate\n    };\n  },\n  [types.CREATE_NEW_COLLUM]: (state, {\n    title\n  }) => {\n    const taskListUpdate = state.taskList;\n    let id = state.taskList.length;\n    let taskTitle = title;\n    taskListUpdate.push({\n      id: id,\n      title: taskTitle,\n      tasks: []\n    });\n    localStorage.setItem('tasks-list', JSON.stringify(taskListUpdate));\n    return _objectSpread({}, state, {\n      taskList: taskListUpdate\n    });\n  },\n  [types.DRAG_ITEM_TO_COLUMN]: (state, {\n    columnId,\n    taskId\n  }) => {\n    const taskListUPD = state.taskList;\n    const allTasksUPD = state.allTasks;\n    let taskIndexToDelete;\n    let targetTask;\n    allTasksUPD.map(task => {\n      if (task.id === parseInt(taskId)) {\n        targetTask = task;\n        task.status = parseInt(columnId);\n      }\n    });\n    taskListUPD.map(item => {\n      item.tasks.map((task, index) => {\n        if (task.id === targetTask.id) {\n          taskIndexToDelete = index;\n        }\n      });\n\n      if (taskIndexToDelete) {\n        item.tasks.splice(taskIndexToDelete, 1);\n        console.log(item.tasks);\n      }\n\n      if (item.id === parseInt(columnId)) {\n        item.tasks.push(targetTask);\n      }\n    });\n    console.log(taskListUPD);\n    localStorage.setItem('tasks-list', JSON.stringify(taskListUPD));\n    localStorage.setItem('tasks', JSON.stringify(allTasksUPD));\n    return _objectSpread({}, state, {\n      taskList: taskListUPD,\n      allTasks: allTasksUPD\n    });\n  }\n});\nexport default taskReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/task/reducers.js"],"names":["types","createReducer","initialTasks","initialTaskLists","initialState","taskList","allTasks","taskReducer","ADD_TASK","state","title","id","storeTasks","JSON","parse","localStorage","getItem","columns","map","item","tasks","push","length","status","setItem","stringify","INIT_TASKS","storeTaskList","storeTask","task","console","log","COMPLETE_TASK","allTasksUpdate","parseInt","completed","CREATE_NEW_COLLUM","taskListUpdate","taskTitle","DRAG_ITEM_TO_COLUMN","columnId","taskId","taskListUPD","allTasksUPD","taskIndexToDelete","targetTask","index","splice"],"mappings":"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","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\"\nimport initialTasks from '../../../api/tasks'\nimport initialTaskLists from \"../../../api/taskList\";\n\nconst initialState = {\n  taskList:[],\n  allTasks: []\n}\n\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.ADD_TASK]: (state, { title, id }) => {\n    const storeTasks = JSON.parse(localStorage.getItem('tasks'));\n    const columns = state.taskList;\n\n    columns.map(item => {\n      if(item.id === id){\n        item.tasks.push({\n          id : state.allTasks.length,\n          title: title,\n          status: id\n        })\n      }\n    })\n\n    storeTasks.push({\n      id : state.allTasks.length,\n      title: title,\n      status: id\n    })\n\n    localStorage.setItem('tasks', JSON.stringify(storeTasks))\n    \n    return{\n      ...state,\n      taskList: columns,\n      allTasks: storeTasks\n    }\n  },\n\n  [types.INIT_TASKS]: (state) => {\n    \n\n\n    let storeTaskList = JSON.parse(localStorage.getItem(\"tasks-list\"));\n    let storeTask = JSON.parse(localStorage.getItem(\"tasks\"));\n    \n    if(storeTask && storeTaskList){\n      \n      storeTaskList.map(item => {\n        storeTask.map(task => {\n          if(task.status === item.id){\n            item.tasks.push(task);\n          }\n        })\n        console.log(item.tasks);\n      })\n\n      return{\n        ...state,\n        taskList: storeTaskList,\n        allTasks: storeTask\n      }\n    }\n    else{\n      localStorage.setItem('tasks-list', JSON.stringify(initialTaskLists))\n      localStorage.setItem('tasks', JSON.stringify(initialTasks))\n\n      return{\n        ...state,\n        taskList: initialTaskLists,\n        allTasks: initialTasks\n      }\n    }\n  },\n\n  [types.COMPLETE_TASK] : (state, {id}) => {\n\n    let allTasksUpdate = [...state.allTasks];\n\n    allTasksUpdate.map(task => {\n      if(task.id === parseInt(id) ){ //&& task.completed===false\n        task.completed = !task.completed\n      }\n    });\n\n    localStorage.setItem(\"tasks\", JSON.stringify(allTasksUpdate))\n\n    return{\n      allTasks: allTasksUpdate\n    }\n  },\n\n  [types.CREATE_NEW_COLLUM] : (state, {title}) => {\n    \n    const taskListUpdate = state.taskList;\n    let id = state.taskList.length\n    let taskTitle = title\n\n    taskListUpdate.push({\n        id:id,\n        title:taskTitle,\n        tasks:[]\n      })\n      \n      localStorage.setItem('tasks-list', JSON.stringify(taskListUpdate))\n\n    return{\n      ...state,\n      taskList: taskListUpdate,\n    }\n  },\n\n  [types.DRAG_ITEM_TO_COLUMN] : (state, {columnId, taskId}) => {\n\n    const taskListUPD = state.taskList;\n    const allTasksUPD = state.allTasks;\n    \n    let taskIndexToDelete\n    let targetTask\n\n    allTasksUPD.map(task => { \n      if(task.id === parseInt(taskId)){\n        targetTask = task\n        task.status = parseInt(columnId)        \n      }\n    });\n\n    taskListUPD.map(item => {\n      item.tasks.map((task, index) => {\n        if(task.id === targetTask.id){\n          taskIndexToDelete = index\n        }\n      })\n      if(taskIndexToDelete){\n        item.tasks.splice(taskIndexToDelete, 1)\n        console.log(item.tasks);\n      }\n      if(item.id === parseInt(columnId)){\n        item.tasks.push(targetTask);\n      }\n    })\n\n    console.log(taskListUPD);\n\n    localStorage.setItem('tasks-list', JSON.stringify(taskListUPD));\n    localStorage.setItem('tasks', JSON.stringify(allTasksUPD))\n\n\n    return{\n      ...state,\n      taskList: taskListUPD,\n      allTasks: allTasksUPD\n    }\n  } \n});\n\nexport default taskReducer;"]},"metadata":{},"sourceType":"module"}