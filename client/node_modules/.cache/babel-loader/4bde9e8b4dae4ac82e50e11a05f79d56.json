{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialTasks from '../../../api/tasks';\nconst initialState = {\n  allTasks: []\n};\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.ADD_TASK]: (state, {\n    payload\n  }) => {\n    const s = JSON.parse(localStorage.getItem('tasks'));\n    s.push({\n      id: Date.now(),\n      title: payload,\n      completed: false\n    });\n    localStorage.setItem('tasks', JSON.stringify(s));\n    return _objectSpread({}, state, {\n      allTasks: s\n    });\n  },\n  [types.INIT_TASKS]: state => {\n    let s = JSON.parse(localStorage.getItem(\"tasks\"));\n    console.log(s);\n\n    if (s) {\n      return _objectSpread({}, state, {\n        allTasks: s\n      });\n    } else {\n      localStorage.setItem('tasks', JSON.stringify(initialTasks));\n      return _objectSpread({}, state, {\n        allTasks: initialTasks\n      });\n    }\n  },\n  [types.COMPLETE_TASK]: (state, {\n    id\n  }) => {\n    let allTasksUpdate = [...state.allTasks];\n    allTasksUpdate.forEach(task => {\n      console.log(task, id);\n\n      if (task.id === parseInt(id)) {\n        console.log(task);\n        task.completed = !task.completed;\n      }\n    }); // console.log(allTasksUpdate);\n\n    localStorage.setItem(\"tasks\", JSON.stringify(allTasksUpdate));\n    return _objectSpread({}, state, {\n      allTasks: allTasksUpdate\n    });\n  }\n});\nexport default taskReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/task/reducers.js"],"names":["types","createReducer","initialTasks","initialState","allTasks","taskReducer","ADD_TASK","state","payload","s","JSON","parse","localStorage","getItem","push","id","Date","now","title","completed","setItem","stringify","INIT_TASKS","console","log","COMPLETE_TASK","allTasksUpdate","forEach","task","parseInt"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AADS,CAArB;AAIA,MAAMC,WAAW,GAAGJ,aAAa,CAACE,YAAD,CAAb,CAA4B;AAC9C;AACA,GAACH,KAAK,CAACM,QAAP,GAAkB,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,KAAwB;AACxC,UAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAV;AACAJ,IAAAA,CAAC,CAACK,IAAF,CAAO;AACLC,MAAAA,EAAE,EAAGC,IAAI,CAACC,GAAL,EADA;AAELC,MAAAA,KAAK,EAAEV,OAFF;AAGLW,MAAAA,SAAS,EAAE;AAHN,KAAP;AAMAP,IAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACW,SAAL,CAAeZ,CAAf,CAA9B;AAEA,6BACKF,KADL;AAEEH,MAAAA,QAAQ,EAAEK;AAFZ;AAID,GAhB6C;AAkB9C,GAACT,KAAK,CAACsB,UAAP,GAAqBf,KAAD,IAAW;AAC7B,QAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAR;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYf,CAAZ;;AACA,QAAGA,CAAH,EAAK;AACH,+BACKF,KADL;AAEEH,QAAAA,QAAQ,EAAEK;AAFZ;AAID,KALD,MAMI;AACFG,MAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACW,SAAL,CAAenB,YAAf,CAA9B;AACA,+BACKK,KADL;AAEEH,QAAAA,QAAQ,EAAEF;AAFZ;AAID;AACF,GAlC6C;AAoC9C,GAACF,KAAK,CAACyB,aAAP,GAAwB,CAAClB,KAAD,EAAQ;AAACQ,IAAAA;AAAD,GAAR,KAAiB;AACvC,QAAIW,cAAc,GAAG,CAAC,GAAGnB,KAAK,CAACH,QAAV,CAArB;AAEAsB,IAAAA,cAAc,CAACC,OAAf,CAAuBC,IAAI,IAAI;AAC7BL,MAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ,EAAkBb,EAAlB;;AAEA,UAAGa,IAAI,CAACb,EAAL,KAAYc,QAAQ,CAACd,EAAD,CAAvB,EAA4B;AAC1BQ,QAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AAEAA,QAAAA,IAAI,CAACT,SAAL,GAAiB,CAACS,IAAI,CAACT,SAAvB;AACD;AACF,KARD,EAHuC,CAavC;;AAEAP,IAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACW,SAAL,CAAeK,cAAf,CAA9B;AAEA,6BACKnB,KADL;AAEEH,MAAAA,QAAQ,EAAEsB;AAFZ;AAID;AAzD6C,CAA5B,CAApB;AA4DA,eAAerB,WAAf","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\"\nimport initialTasks from '../../../api/tasks'\n\nconst initialState = {\n  allTasks: []\n}\n\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.ADD_TASK]: (state, { payload }) => {\n    const s = JSON.parse(localStorage.getItem('tasks'));\n    s.push({\n      id : Date.now(),\n      title: payload,\n      completed: false\n    })\n    \n    localStorage.setItem('tasks', JSON.stringify(s))\n    \n    return{\n      ...state,\n      allTasks: s\n    }\n  },\n\n  [types.INIT_TASKS]: (state) => {\n    let s = JSON.parse(localStorage.getItem(\"tasks\"));\n    console.log(s);\n    if(s){\n      return{\n        ...state,\n        allTasks: s\n      }\n    }\n    else{\n      localStorage.setItem('tasks', JSON.stringify(initialTasks))\n      return{\n        ...state,\n        allTasks: initialTasks\n      }\n    }\n  },\n\n  [types.COMPLETE_TASK] : (state, {id}) => {\n    let allTasksUpdate = [...state.allTasks];\n\n    allTasksUpdate.forEach(task => {\n      console.log(task, id);\n      \n      if(task.id === parseInt(id)){\n        console.log(task);\n        \n        task.completed = !task.completed\n      }\n    });\n    \n    // console.log(allTasksUpdate);\n\n    localStorage.setItem(\"tasks\", JSON.stringify(allTasksUpdate))\n\n    return{\n      ...state,\n      allTasks: allTasksUpdate\n    }\n  }\n});\n\nexport default taskReducer;"]},"metadata":{},"sourceType":"module"}