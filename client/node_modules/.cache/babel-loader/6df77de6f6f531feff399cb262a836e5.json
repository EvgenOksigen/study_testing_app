{"ast":null,"code":"var _jsxFileName = \"/home/evgeny/Public/reduxtraine/my-app/src/views/pages/Trello/TaskItem.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { taskComplete } from '../../../state/ducks/task/actions';\n\nconst TaskItem = ({\n  task,\n  index,\n  taskComplete\n}) => {\n  const dragNDrop = e => {\n    const dragItem = e.target;\n\n    dragItem.ondragstart = function () {\n      return false;\n    };\n\n    let currentDroppable = null;\n\n    dragItem.onmousedown = e => {\n      dragItem.style.position = 'absolute';\n      dragItem.style.zIndex = 1000;\n      let shiftX = e.clientX - dragItem.getBoundingClientRect().left;\n      let shiftY = e.clientY - dragItem.getBoundingClientRect().top;\n      document.body.append(dragItem);\n      moveAt(e.pageX, e.pageY);\n\n      function moveAt(pageX, pageY) {\n        dragItem.style.left = pageX - shiftX + 'px';\n        dragItem.style.top = pageY - shiftY + 'px';\n      }\n\n      function onMouseMove(e) {\n        moveAt(e.pageX, e.pageY);\n        console.log(currentDroppable);\n        dragItem.hidden = true;\n        let elemBelow = document.elementFromPoint(e.clientX, e.clientY);\n        dragItem.hidden = false;\n        if (!elemBelow) return;\n        let droppableBelow = elemBelow.closest('.finished');\n\n        if (currentDroppable != droppableBelow) {\n          if (currentDroppable) {\n            leaveDroppable(currentDroppable);\n          }\n\n          currentDroppable = droppableBelow;\n\n          if (currentDroppable) {\n            enterDroppable(currentDroppable);\n          }\n        }\n      }\n\n      document.addEventListener('mousemove', onMouseMove);\n\n      dragItem.onmouseup = e => {\n        //смотрим что \"под\" курсором и под перетаскиваемым элементом\n        dragItem.hidden = true;\n        let elemBelow = document.elementFromPoint(e.clientX, e.clientY);\n        dragItem.hidden = false; //проверка на расположение зоны дропа в нужном месте\n\n        let droppableBelow = elemBelow.closest('.finished');\n        let droppableBelowBak = elemBelow.closest('.not-finished');\n\n        if (currentDroppable === elemBelow && currentDroppable === droppableBelow) {\n          // console.log('курсор находится над ЗЕЛЁНОЙ зоной дропа и мышь была отпущена');\n          taskComplete(dragItem.id);\n          dragItem.remove();\n        }\n\n        if (elemBelow === droppableBelowBak) {\n          // console.log('курсор находится над крассной зоной дропа и мышь была отпущена');\n          taskComplete(dragItem.id);\n          dragItem.remove();\n        } // console.log(currentDroppable);// текущая зона для дропа\n        // console.log(elemBelow); //элемент который \"снизу\" под курсором во время отжатия клавиши\n        // console.log(droppableBelow);// элемент в котором лежит зона дропа (проверка на \"родителя\" = finished )\n\n\n        document.removeEventListener('mousemove', onMouseMove);\n        dragItem.onmouseup = null;\n      };\n    };\n\n    function enterDroppable(elem) {\n      elem.style.background = '#afe892';\n    }\n\n    function enterDroppableBack(elem) {\n      elem.style.background = 'pink';\n    }\n\n    function leaveDroppable(elem) {\n      elem.style.background = '';\n    }\n  };\n\n  const style = {\n    span: {\n      display: 'block',\n      width: '200px',\n      padding: 0,\n      listStyleType: 'none',\n      textAlign: 'left'\n    }\n  };\n  return React.createElement(\"span\", {\n    className: \"taskItem\",\n    style: style.span,\n    onMouseOver: dragNDrop,\n    id: task.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, index + 1, \" \", task.title, \" \", task.completed.toLocaleString());\n};\n\nconst mapDispatchToProps = {\n  taskComplete\n};\nexport default connect(null, mapDispatchToProps)(TaskItem);","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/views/pages/Trello/TaskItem.js"],"names":["React","connect","taskComplete","TaskItem","task","index","dragNDrop","e","dragItem","target","ondragstart","currentDroppable","onmousedown","style","position","zIndex","shiftX","clientX","getBoundingClientRect","left","shiftY","clientY","top","document","body","append","moveAt","pageX","pageY","onMouseMove","console","log","hidden","elemBelow","elementFromPoint","droppableBelow","closest","leaveDroppable","enterDroppable","addEventListener","onmouseup","droppableBelowBak","id","remove","removeEventListener","elem","background","enterDroppableBack","span","display","width","padding","listStyleType","textAlign","title","completed","toLocaleString","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux';\nimport {taskComplete} from '../../../state/ducks/task/actions'\n\nconst TaskItem = ({task, index, taskComplete}) =>{\n  const dragNDrop = (e) => {\n    const dragItem = e.target;\n    \n    dragItem.ondragstart = function() {\n      return false;\n    };\n    let currentDroppable = null;\n    \n    dragItem.onmousedown = e => {\n      dragItem.style.position = 'absolute'\n      dragItem.style.zIndex = 1000;\n      \n      let shiftX = e.clientX - dragItem.getBoundingClientRect().left;\n      let shiftY = e.clientY - dragItem.getBoundingClientRect().top;\n      \n      document.body.append(dragItem);\n\n      moveAt(e.pageX, e.pageY);\n      \n      function moveAt(pageX, pageY){\n        dragItem.style.left = pageX - shiftX +'px'\n        dragItem.style.top = pageY - shiftY +'px'\n      }\n  \n      function onMouseMove(e) {\n        moveAt(e.pageX, e.pageY);\n        console.log(currentDroppable);\n  \n        dragItem.hidden = true;\n        let elemBelow = document.elementFromPoint(e.clientX, e.clientY);\n        dragItem.hidden = false;\n  \n        if (!elemBelow) return;\n  \n        let droppableBelow = elemBelow.closest('.finished');\n  \n  \n        if (currentDroppable != droppableBelow) {\n          if (currentDroppable) {\n            leaveDroppable(currentDroppable);\n          }\n          currentDroppable = droppableBelow;\n          if (currentDroppable) {\n            enterDroppable(currentDroppable);\n          }\n        } \n       \n\n      }\n  \n      document.addEventListener('mousemove', onMouseMove);\n  \n      dragItem.onmouseup = (e) => {\n        //смотрим что \"под\" курсором и под перетаскиваемым элементом\n        dragItem.hidden = true;\n        let elemBelow = document.elementFromPoint(e.clientX, e.clientY);\n        dragItem.hidden = false;\n        //проверка на расположение зоны дропа в нужном месте\n        let droppableBelow = elemBelow.closest('.finished');\n        let droppableBelowBak = elemBelow.closest('.not-finished')\n        \n        if(currentDroppable === elemBelow && currentDroppable === droppableBelow){\n          // console.log('курсор находится над ЗЕЛЁНОЙ зоной дропа и мышь была отпущена');\n          taskComplete(dragItem.id)\n          dragItem.remove();\n        }\n        if(elemBelow === droppableBelowBak){\n          // console.log('курсор находится над крассной зоной дропа и мышь была отпущена');\n          taskComplete(dragItem.id)\n          dragItem.remove();\n        }\n        \n        // console.log(currentDroppable);// текущая зона для дропа\n        // console.log(elemBelow); //элемент который \"снизу\" под курсором во время отжатия клавиши\n        // console.log(droppableBelow);// элемент в котором лежит зона дропа (проверка на \"родителя\" = finished )\n  \n          document.removeEventListener('mousemove', onMouseMove);\n          dragItem.onmouseup = null;\n  \n      };\n    }\n    \n    function enterDroppable(elem) {\n      elem.style.background = '#afe892';\n    }\n  \n    function enterDroppableBack(elem) {\n      elem.style.background = 'pink';\n    }\n    \n    function leaveDroppable(elem) {\n      elem.style.background = '';\n    }\n\n  }\n\n  \n  const style = {\n    span:{\n      display: 'block',\n      width:'200px',\n      padding:0 ,\n      listStyleType:'none',\n      textAlign:'left'\n    }\n  }\n  \n  return(\n  <span className='taskItem'\n      style={style.span}\n      onMouseOver={dragNDrop}\n      id={task.id}>\n        {index+1} {task.title} {task.completed.toLocaleString()}\n  </span>\n    )\n}\n\n\nconst mapDispatchToProps = { taskComplete};\n\nexport default connect(null, mapDispatchToProps)(TaskItem);"]},"metadata":{},"sourceType":"module"}