{"ast":null,"code":"var _jsxFileName = \"/home/evgeny/Public/reduxtraine/my-app/src/App.js\";\nimport React from 'react';\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/Weather';\nimport './wrapper.css';\nconst API_KEY = \"9ea6825b8b5dae9d2dafb3fa6056126c\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temp: undefined,\n      city: undefined,\n      country: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      error: undefined\n    };\n\n    this.gettingWeather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n\n      if (city) {\n        const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`);\n        const data = await api_url.json();\n        console.log(data);\n        let sunset = data.sys.sunset;\n        let sunrise = data.sys.sunrise;\n        let dateOfSunset = new Date();\n        let dateOfSunrise = new Date();\n        dateOfSunset.setTime(sunset);\n        dateOfSunrise.setTime(sunrise);\n        this.setState({\n          temp: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          sunrise: `${dateOfSunrise.getHours()} : ${dateOfSunrise.getMinutes()} : ${dateOfSunrise.getSeconds()}`,\n          sunset: `${dateOfSunset.getHours()} : ${dateOfSunset.getMinutes()} : ${dateOfSunset.getSeconds()}`,\n          error: \"\"\n        });\n      } else {\n        this.setState({\n          temp: undefined,\n          city: undefined,\n          country: undefined,\n          sunrise: undefined,\n          sunset: undefined,\n          error: \"ERROR : Введите название города !\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \" \"), React.createElement(Info, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }))), React.createElement(Form, {\n      getWeather: this.gettingWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      temp: this.state.temp,\n      city: this.state.city,\n      country: this.state.country,\n      sunrise: this.state.sunrise,\n      sunset: this.state.sunset,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/App.js"],"names":["React","Info","Form","Weather","API_KEY","App","Component","state","temp","undefined","city","country","sunrise","sunset","error","gettingWeather","e","preventDefault","target","elements","value","api_url","fetch","data","json","console","log","sys","dateOfSunset","Date","dateOfSunrise","setTime","setState","main","name","getHours","getMinutes","getSeconds","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/Weather';\n\nimport './wrapper.css';\n\nconst API_KEY = \"9ea6825b8b5dae9d2dafb3fa6056126c\";\n\nclass App extends React.Component{\n\n  state = {\n    temp : undefined,\n    city : undefined,\n    country : undefined ,\n    sunrise : undefined,\n    sunset : undefined,\n    error : undefined\n  }\n\n  gettingWeather = async(e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    \n    if(city){\n      \n      const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`);\n      const data = await api_url.json();\n      \n      console.log(data);\n     \n      let sunset = data.sys.sunset;\n      let sunrise = data.sys.sunrise;\n\n      let dateOfSunset = new Date();\n      let dateOfSunrise = new Date();\n\n\n      dateOfSunset.setTime(sunset);\n      dateOfSunrise.setTime(sunrise);\n      \n      this.setState({\n        temp: data.main.temp,\n        city : data.name,\n        country : data.sys.country ,\n        sunrise : `${dateOfSunrise.getHours()} : ${dateOfSunrise.getMinutes()} : ${dateOfSunrise.getSeconds()}`,\n        sunset : `${dateOfSunset.getHours()} : ${dateOfSunset.getMinutes()} : ${dateOfSunset.getSeconds()}`,\n        error : \"\"\n      })\n    }\n    else{\n      this.setState({        \n          temp : undefined,\n          city : undefined,\n          country : undefined ,\n          sunrise : undefined,\n          sunset : undefined,\n          error : \"ERROR : Введите название города !\"\n      })\n    }\n\n    \n\n  }\n\n\n  render() {\n    return(\n      <div className=\"wrapper\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-5\"> </div>\n        <Info/>\n          </div>\n        </div>\n        <Form getWeather={this.gettingWeather} />\n        <Weather temp={this.state.temp}\n                 city={this.state.city}\n                 country={this.state.country}\n                 sunrise={this.state.sunrise}\n                 sunset={this.state.sunset}\n                 error={this.state.error}\n                 />\n      </div>\n    )\n  }\n}\n\nexport default App;\n  "]},"metadata":{},"sourceType":"module"}