{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialTasks from '../../../api/tasks';\nimport initialTaskLists from \"../../../api/taskList\";\nconst initialState = {\n  taskList: [],\n  allTasks: []\n};\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.ADD_TASK]: (state, {\n    title,\n    id\n  }) => {\n    const storeTasks = JSON.parse(localStorage.getItem('tasks'));\n    const columns = state.taskList;\n    storeTasks.push({\n      id: state.allTasks.length,\n      title: title,\n      status: id\n    }); // console.log(columns);\n\n    storeTasks.map(task => {\n      columns.map(column => {\n        if (task.status === column.id) {\n          column.tasks.push(task);\n        }\n      });\n    });\n    console.log(columns[1]);\n    localStorage.setItem('tasks', JSON.stringify(storeTasks));\n    return _objectSpread({}, state, {\n      taskList: columns,\n      allTasks: storeTasks\n    });\n  },\n  [types.INIT_TASKS]: state => {\n    initialTaskLists.map(item => {\n      initialTasks.map(task => {\n        if (task.status === item.id) {\n          item.tasks.push(task);\n        }\n      }); //  console.log(item.tasks);\n    });\n    let storeTaskList = JSON.parse(localStorage.getItem(\"tasks-list\"));\n    let storeTask = JSON.parse(localStorage.getItem(\"tasks\"));\n\n    if (storeTask) {\n      return _objectSpread({}, state, {\n        taskList: storeTaskList,\n        allTasks: storeTask\n      });\n    } else {\n      localStorage.setItem('tasks-list', JSON.stringify(initialTaskLists));\n      localStorage.setItem('tasks', JSON.stringify(initialTasks));\n      return _objectSpread({}, state, {\n        taskList: initialTaskLists,\n        allTasks: initialTasks\n      });\n    }\n  },\n  [types.COMPLETE_TASK]: (state, {\n    id\n  }) => {\n    let allTasksUpdate = [...state.allTasks];\n    allTasksUpdate.map(task => {\n      if (task.id === parseInt(id)) {\n        //&& task.completed===false\n        task.completed = !task.completed;\n      }\n    });\n    localStorage.setItem(\"tasks\", JSON.stringify(allTasksUpdate));\n    return {\n      allTasks: allTasksUpdate\n    };\n  },\n  [types.CREATE_NEW_COLLUM]: (state, {\n    title\n  }) => {\n    const taskListUpdate = state.taskList;\n    let id = state.taskList.length;\n    let taskTitle = title.match(/\\w+/g).toLocaleString().replace(/[\\s.,%]/g, '');\n    taskListUpdate.push({\n      id: id,\n      title: taskTitle,\n      tasks: []\n    });\n    localStorage.setItem('tasks-list', JSON.stringify(taskListUpdate));\n    return _objectSpread({}, state, {\n      taskList: taskListUpdate\n    });\n  }\n});\nexport default taskReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/task/reducers.js"],"names":["types","createReducer","initialTasks","initialTaskLists","initialState","taskList","allTasks","taskReducer","ADD_TASK","state","title","id","storeTasks","JSON","parse","localStorage","getItem","columns","push","length","status","map","task","column","tasks","console","log","setItem","stringify","INIT_TASKS","item","storeTaskList","storeTask","COMPLETE_TASK","allTasksUpdate","parseInt","completed","CREATE_NEW_COLLUM","taskListUpdate","taskTitle","match","toLocaleString","replace"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAC,EADU;AAEnBC,EAAAA,QAAQ,EAAE;AAFS,CAArB;AAKA,MAAMC,WAAW,GAAGN,aAAa,CAACG,YAAD,CAAb,CAA4B;AAC9C;AACA,GAACJ,KAAK,CAACQ,QAAP,GAAkB,CAACC,KAAD,EAAQ;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAR,KAA0B;AAC1C,UAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAnB;AACA,UAAMC,OAAO,GAAGR,KAAK,CAACJ,QAAtB;AAEAO,IAAAA,UAAU,CAACM,IAAX,CAAgB;AACdP,MAAAA,EAAE,EAAGF,KAAK,CAACH,QAAN,CAAea,MADN;AAEdT,MAAAA,KAAK,EAAEA,KAFO;AAGdU,MAAAA,MAAM,EAAET;AAHM,KAAhB,EAJ0C,CAS1C;;AAEAC,IAAAA,UAAU,CAACS,GAAX,CAAeC,IAAI,IAAE;AACnBL,MAAAA,OAAO,CAACI,GAAR,CAAYE,MAAM,IAAE;AAClB,YAAGD,IAAI,CAACF,MAAL,KAAgBG,MAAM,CAACZ,EAA1B,EAA6B;AAC3BY,UAAAA,MAAM,CAACC,KAAP,CAAaN,IAAb,CAAkBI,IAAlB;AACD;AACF,OAJD;AAKD,KAND;AAQAG,IAAAA,OAAO,CAACC,GAAR,CAAYT,OAAO,CAAC,CAAD,CAAnB;AAEAF,IAAAA,YAAY,CAACY,OAAb,CAAqB,OAArB,EAA8Bd,IAAI,CAACe,SAAL,CAAehB,UAAf,CAA9B;AAEA,6BACKH,KADL;AAEEJ,MAAAA,QAAQ,EAAEY,OAFZ;AAGEX,MAAAA,QAAQ,EAAEM;AAHZ;AAKD,GA9B6C;AAgC9C,GAACZ,KAAK,CAAC6B,UAAP,GAAqBpB,KAAD,IAAW;AAC7BN,IAAAA,gBAAgB,CAACkB,GAAjB,CAAqBS,IAAI,IAAI;AAC3B5B,MAAAA,YAAY,CAACmB,GAAb,CAAiBC,IAAI,IAAI;AACvB,YAAGA,IAAI,CAACF,MAAL,KAAgBU,IAAI,CAACnB,EAAxB,EAA2B;AACzBmB,UAAAA,IAAI,CAACN,KAAL,CAAWN,IAAX,CAAgBI,IAAhB;AACD;AACD,OAJF,EAD2B,CAM3B;AACD,KAPD;AAUA,QAAIS,aAAa,GAAGlB,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX,CAApB;AACA,QAAIgB,SAAS,GAAGnB,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAhB;;AAEA,QAAGgB,SAAH,EAAa;AACX,+BACKvB,KADL;AAEEJ,QAAAA,QAAQ,EAAE0B,aAFZ;AAGEzB,QAAAA,QAAQ,EAAE0B;AAHZ;AAKD,KAND,MAOI;AACFjB,MAAAA,YAAY,CAACY,OAAb,CAAqB,YAArB,EAAmCd,IAAI,CAACe,SAAL,CAAezB,gBAAf,CAAnC;AACAY,MAAAA,YAAY,CAACY,OAAb,CAAqB,OAArB,EAA8Bd,IAAI,CAACe,SAAL,CAAe1B,YAAf,CAA9B;AAEA,+BACKO,KADL;AAEEJ,QAAAA,QAAQ,EAAEF,gBAFZ;AAGEG,QAAAA,QAAQ,EAAEJ;AAHZ;AAKD;AACF,GA/D6C;AAiE9C,GAACF,KAAK,CAACiC,aAAP,GAAwB,CAACxB,KAAD,EAAQ;AAACE,IAAAA;AAAD,GAAR,KAAiB;AAEvC,QAAIuB,cAAc,GAAG,CAAC,GAAGzB,KAAK,CAACH,QAAV,CAArB;AAEA4B,IAAAA,cAAc,CAACb,GAAf,CAAmBC,IAAI,IAAI;AACzB,UAAGA,IAAI,CAACX,EAAL,KAAYwB,QAAQ,CAACxB,EAAD,CAAvB,EAA6B;AAAE;AAC7BW,QAAAA,IAAI,CAACc,SAAL,GAAiB,CAACd,IAAI,CAACc,SAAvB;AACD;AACF,KAJD;AAMArB,IAAAA,YAAY,CAACY,OAAb,CAAqB,OAArB,EAA8Bd,IAAI,CAACe,SAAL,CAAeM,cAAf,CAA9B;AAEA,WAAM;AACJ5B,MAAAA,QAAQ,EAAE4B;AADN,KAAN;AAGD,GAhF6C;AAkF9C,GAAClC,KAAK,CAACqC,iBAAP,GAA4B,CAAC5B,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAoB;AAE9C,UAAM4B,cAAc,GAAG7B,KAAK,CAACJ,QAA7B;AACA,QAAIM,EAAE,GAAGF,KAAK,CAACJ,QAAN,CAAec,MAAxB;AACA,QAAIoB,SAAS,GAAG7B,KAAK,CAAC8B,KAAN,CAAY,MAAZ,EAAoBC,cAApB,GAAqCC,OAArC,CAA6C,UAA7C,EAAyD,EAAzD,CAAhB;AAEAJ,IAAAA,cAAc,CAACpB,IAAf,CAAoB;AAChBP,MAAAA,EAAE,EAACA,EADa;AAEhBD,MAAAA,KAAK,EAAC6B,SAFU;AAGhBf,MAAAA,KAAK,EAAC;AAHU,KAApB;AAMET,IAAAA,YAAY,CAACY,OAAb,CAAqB,YAArB,EAAmCd,IAAI,CAACe,SAAL,CAAeU,cAAf,CAAnC;AAEF,6BACK7B,KADL;AAEEJ,MAAAA,QAAQ,EAAEiC;AAFZ;AAID;AApG6C,CAA5B,CAApB;AAuGA,eAAe/B,WAAf","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\"\nimport initialTasks from '../../../api/tasks'\nimport initialTaskLists from \"../../../api/taskList\";\n\nconst initialState = {\n  taskList:[],\n  allTasks: []\n}\n\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.ADD_TASK]: (state, { title, id }) => {\n    const storeTasks = JSON.parse(localStorage.getItem('tasks'));\n    const columns = state.taskList;\n\n    storeTasks.push({\n      id : state.allTasks.length,\n      title: title,\n      status: id\n    })\n    // console.log(columns);\n    \n    storeTasks.map(task=>{\n      columns.map(column=>{\n        if(task.status === column.id){\n          column.tasks.push(task)\n        }    \n      })\n    })\n    \n    console.log(columns[1]);\n\n    localStorage.setItem('tasks', JSON.stringify(storeTasks))\n    \n    return{\n      ...state,\n      taskList: columns,\n      allTasks: storeTasks\n    }\n  },\n\n  [types.INIT_TASKS]: (state) => {\n    initialTaskLists.map(item => {\n      initialTasks.map(task => {\n        if(task.status === item.id){\n          item.tasks.push(task);\n        }\n       })\n      //  console.log(item.tasks);\n    })\n\n\n    let storeTaskList = JSON.parse(localStorage.getItem(\"tasks-list\"));\n    let storeTask = JSON.parse(localStorage.getItem(\"tasks\"));\n    \n    if(storeTask){\n      return{\n        ...state,\n        taskList: storeTaskList,\n        allTasks: storeTask\n      }\n    }\n    else{\n      localStorage.setItem('tasks-list', JSON.stringify(initialTaskLists))\n      localStorage.setItem('tasks', JSON.stringify(initialTasks))\n\n      return{\n        ...state,\n        taskList: initialTaskLists,\n        allTasks: initialTasks\n      }\n    }\n  },\n\n  [types.COMPLETE_TASK] : (state, {id}) => {\n\n    let allTasksUpdate = [...state.allTasks];\n\n    allTasksUpdate.map(task => {\n      if(task.id === parseInt(id) ){ //&& task.completed===false\n        task.completed = !task.completed\n      }\n    });\n\n    localStorage.setItem(\"tasks\", JSON.stringify(allTasksUpdate))\n\n    return{\n      allTasks: allTasksUpdate\n    }\n  },\n\n  [types.CREATE_NEW_COLLUM] : (state, {title}) => {\n    \n    const taskListUpdate = state.taskList;\n    let id = state.taskList.length\n    let taskTitle = title.match(/\\w+/g).toLocaleString().replace(/[\\s.,%]/g, '')\n\n    taskListUpdate.push({\n        id:id,\n        title:taskTitle,\n        tasks:[]\n      })\n      \n      localStorage.setItem('tasks-list', JSON.stringify(taskListUpdate))\n\n    return{\n      ...state,\n      taskList: taskListUpdate,\n    }\n  }\n});\n\nexport default taskReducer;"]},"metadata":{},"sourceType":"module"}