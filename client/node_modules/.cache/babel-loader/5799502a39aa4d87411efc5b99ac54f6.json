{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from \"../../../api/contacts\";\nconst initialState = {\n  data: [],\n  findItems: []\n};\nconst startReducer = createReducer(initialState)({\n  //\n  [types.INIT_CONTACTS]: (state, {\n    data\n  }) => {\n    console.log(data);\n    const dataStore = JSON.parse(localStorage.getItem('contacts'));\n    return _objectSpread({}, state, {\n      data,\n      findItems: dataStore.map(item => item.name)\n    });\n  },\n  [types.SORT]: (state, {\n    payload\n  }) => {\n    console.log(payload);\n    let data = state.data.sort((a, b) => a.name !== b.name ? a.name < b.name ? -1 : 1 : 0);\n    return _objectSpread({}, state, {\n      data\n    });\n  },\n  [types.FIND]: (state, {\n    payload\n  }) => {\n    let findItems = [];\n    let regExp = new RegExp(`${payload}`, 'gi');\n    state.data.forEach(item => {\n      if (item.name.match(regExp)) {\n        findItems.push(item.name);\n      }\n    });\n    return _objectSpread({}, state, {\n      findItems\n    });\n  },\n  [types.DELETE_CONTACT]: (state, {\n    id\n  }) => {\n    const contactListAfterDelete = [...state.data];\n    let indexOfDelete;\n    contactListAfterDelete.forEach((contact, index) => {\n      if (contact.id === id) {\n        indexOfDelete = index;\n      }\n    });\n    contactListAfterDelete.splice(indexOfDelete, 1);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListAfterDelete));\n    return _objectSpread({}, state, {\n      findItems: contactListAfterDelete.map(item => item.name),\n      data: contactListAfterDelete\n    });\n  },\n  [types.RESET]: state => {\n    localStorage.setItem('contacts', JSON.stringify(initialContacts));\n    return _objectSpread({}, state, {\n      findItems: initialContacts.map(item => item.name),\n      data: initialContacts\n    });\n  }\n});\nexport default startReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/search/reducers.js"],"names":["types","createReducer","initialContacts","initialState","data","findItems","startReducer","INIT_CONTACTS","state","console","log","dataStore","JSON","parse","localStorage","getItem","map","item","name","SORT","payload","sort","a","b","FIND","regExp","RegExp","forEach","match","push","DELETE_CONTACT","id","contactListAfterDelete","indexOfDelete","contact","index","splice","setItem","stringify","RESET"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,SAAS,EAAE;AAFQ,CAArB;AAKA,MAAMC,YAAY,GAAGL,aAAa,CAACE,YAAD,CAAb,CAA4B;AAChD;AACA,GAACH,KAAK,CAACO,aAAP,GAAuB,CAACC,KAAD,EAAQ;AAACJ,IAAAA;AAAD,GAAR,KAAmB;AACzCK,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AAEA,UAAMO,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAlB;AACA,6BACKP,KADL;AAEEJ,MAAAA,IAFF;AAGEC,MAAAA,SAAS,EAAEM,SAAS,CAACK,GAAV,CAAcC,IAAI,IAAIA,IAAI,CAACC,IAA3B;AAHb;AAKD,GAXgD;AAa/C,GAAClB,KAAK,CAACmB,IAAP,GAAc,CAACX,KAAD,EAAQ;AAACY,IAAAA;AAAD,GAAR,KAAsB;AAClCX,IAAAA,OAAO,CAACC,GAAR,CAAYU,OAAZ;AAEA,QAAIhB,IAAI,GAAGI,KAAK,CAACJ,IAAN,CAAWiB,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KACzBD,CAAC,CAACJ,IAAF,KAAWK,CAAC,CAACL,IAAb,GAAqBI,CAAC,CAACJ,IAAF,GAASK,CAAC,CAACL,IAAX,GAAkB,CAAC,CAAnB,GAAuB,CAA5C,GAAiD,CADxC,CAAX;AAEA,6BACKV,KADL;AAEEJ,MAAAA;AAFF;AAID,GAtB8C;AAwB/C,GAACJ,KAAK,CAACwB,IAAP,GAAc,CAAChB,KAAD,EAAQ;AAACY,IAAAA;AAAD,GAAR,KAAsB;AAChC,QAAIf,SAAS,GAAG,EAAhB;AAEA,QAAIoB,MAAM,GAAG,IAAIC,MAAJ,CAAY,GAAEN,OAAQ,EAAtB,EAAyB,IAAzB,CAAb;AAEAZ,IAAAA,KAAK,CAACJ,IAAN,CAAWuB,OAAX,CAAmBV,IAAI,IAAI;AAC3B,UAAIA,IAAI,CAACC,IAAL,CAAUU,KAAV,CAAgBH,MAAhB,CAAJ,EAA6B;AAC3BpB,QAAAA,SAAS,CAACwB,IAAV,CAAeZ,IAAI,CAACC,IAApB;AACD;AACF,KAJC;AAMF,6BACKV,KADL;AAEEH,MAAAA;AAFF;AAID,GAvC8C;AAyC/C,GAACL,KAAK,CAAC8B,cAAP,GAAwB,CAACtB,KAAD,EAAQ;AAACuB,IAAAA;AAAD,GAAR,KAAiB;AAEvC,UAAMC,sBAAsB,GAAG,CAAC,GAAGxB,KAAK,CAACJ,IAAV,CAA/B;AAEA,QAAI6B,aAAJ;AAEAD,IAAAA,sBAAsB,CAACL,OAAvB,CAA+B,CAACO,OAAD,EAAUC,KAAV,KAAoB;AACjD,UAAGD,OAAO,CAACH,EAAR,KAAeA,EAAlB,EAAsB;AACpBE,QAAAA,aAAa,GAAGE,KAAhB;AACD;AACF,KAJD;AAMAH,IAAAA,sBAAsB,CAACI,MAAvB,CAA8BH,aAA9B,EAA4C,CAA5C;AACAnB,IAAAA,YAAY,CAACuB,OAAb,CAAqB,UAArB,EAAiCzB,IAAI,CAAC0B,SAAL,CAAeN,sBAAf,CAAjC;AAEA,6BACKxB,KADL;AAEEH,MAAAA,SAAS,EAAE2B,sBAAsB,CAAChB,GAAvB,CAA2BC,IAAI,IAAEA,IAAI,CAACC,IAAtC,CAFb;AAGEd,MAAAA,IAAI,EAAE4B;AAHR;AAKD,GA7D8C;AA+D/C,GAAChC,KAAK,CAACuC,KAAP,GAAiB/B,KAAD,IAAW;AAEzBM,IAAAA,YAAY,CAACuB,OAAb,CAAqB,UAArB,EAAiCzB,IAAI,CAAC0B,SAAL,CAAepC,eAAf,CAAjC;AAEA,6BACKM,KADL;AAEEH,MAAAA,SAAS,EAACH,eAAe,CAACc,GAAhB,CAAoBC,IAAI,IAAEA,IAAI,CAACC,IAA/B,CAFZ;AAGEd,MAAAA,IAAI,EAAEF;AAHR;AAKD;AAxE8C,CAA5B,CAArB;AA4EA,eAAeI,YAAf","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from \"../../../api/contacts\";\n\nconst initialState = {\n  data: [], \n  findItems: [] \n}\n\nconst startReducer = createReducer(initialState)({\n //\n [types.INIT_CONTACTS]: (state, {data}) => {\n  console.log(data);\n\n  const dataStore = JSON.parse(localStorage.getItem('contacts'));\n  return{\n    ...state,\n    data ,\n    findItems: dataStore.map(item => item.name)\n  }\n},\n\n  [types.SORT]: (state, {payload}) => {   \n    console.log(payload)\n\n    let data = state.data.sort((a, b) =>\n      a.name !== b.name ? (a.name < b.name ? -1 : 1) : 0)\n    return{\n      ...state,\n      data\n    }\n  },\n\n  [types.FIND]: (state, {payload}) => {\n      let findItems = []\n\n      let regExp = new RegExp(`${payload}`, 'gi')\n\n      state.data.forEach(item => {\n      if (item.name.match(regExp)) {\n        findItems.push(item.name);\n      }\n    });\n\n    return{\n      ...state,\n      findItems\n    }\n  },\n\n  [types.DELETE_CONTACT]: (state, {id}) => {\n\n    const contactListAfterDelete = [...state.data];\n\n    let indexOfDelete;\n\n    contactListAfterDelete.forEach((contact, index) => {\n      if(contact.id === id ){\n        indexOfDelete = index;\n      }\n    })\n\n    contactListAfterDelete.splice(indexOfDelete,1);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListAfterDelete))\n    \n    return{\n      ...state,\n      findItems: contactListAfterDelete.map(item=>item.name),\n      data: contactListAfterDelete\n    }\n  },\n\n  [types.RESET] : (state) => {\n\n    localStorage.setItem('contacts', JSON.stringify(initialContacts));\n    \n    return{\n      ...state,\n      findItems:initialContacts.map(item=>item.name),\n      data: initialContacts\n    }\n  }\n\n});\n\nexport default startReducer;"]},"metadata":{},"sourceType":"module"}