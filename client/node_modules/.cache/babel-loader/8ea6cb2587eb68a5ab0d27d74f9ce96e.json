{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from \"../../../api/contacts\";\nconst initialState = {\n  contacts: JSON.parse(localStorage.getItem(\"contacts\")),\n  findItems: contacts\n};\nconst startReducer = createReducer(initialState)({\n  [types.SORT]: (state, {\n    payload\n  }) => {\n    return _objectSpread({}, state, {\n      contacts: payload\n    });\n  },\n  [types.FIND]: (state, {\n    payload\n  }) => {\n    let findItems = [];\n    let regExp = new RegExp(`${payload}`, 'gi');\n    state.contacts.forEach(item => {\n      if (item.name.match(regExp)) {\n        findItems.push(item.name);\n      }\n    });\n    return _objectSpread({}, state, {\n      findItems\n    });\n  },\n  [types.DELETE_CONTACT]: (state, {\n    id\n  }) => {\n    const contactListAfterDelete = [...state.contacts];\n    let indexOfDelete;\n    contactListAfterDelete.forEach((contact, index) => {\n      if (contact.id === id) {\n        indexOfDelete = index;\n      }\n    });\n    contactListAfterDelete.splice(indexOfDelete, 1);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListAfterDelete));\n    return _objectSpread({}, state, {\n      contacts: contactListAfterDelete\n    });\n  },\n  [types.RESET]: state => {\n    localStorage.setItem('contacts', JSON.stringify(initialContacts));\n    return _objectSpread({}, state, {\n      contacts: initialContacts\n    });\n  }\n});\nexport default startReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/search/reducers.js"],"names":["types","createReducer","initialContacts","initialState","contacts","JSON","parse","localStorage","getItem","findItems","startReducer","SORT","state","payload","FIND","regExp","RegExp","forEach","item","name","match","push","DELETE_CONTACT","id","contactListAfterDelete","indexOfDelete","contact","index","splice","setItem","stringify","RESET"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AAIA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADS;AAEnBC,EAAAA,SAAS,EAAEL;AAFQ,CAArB;AAKA,MAAMM,YAAY,GAAGT,aAAa,CAACE,YAAD,CAAb,CAA4B;AAE/C,GAACH,KAAK,CAACW,IAAP,GAAc,CAACC,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAsB;AAClC,6BACKD,KADL;AAEER,MAAAA,QAAQ,EAAES;AAFZ;AAID,GAP8C;AAS/C,GAACb,KAAK,CAACc,IAAP,GAAc,CAACF,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAsB;AAChC,QAAIJ,SAAS,GAAG,EAAhB;AAEA,QAAIM,MAAM,GAAG,IAAIC,MAAJ,CAAY,GAAEH,OAAQ,EAAtB,EAAyB,IAAzB,CAAb;AAEAD,IAAAA,KAAK,CAACR,QAAN,CAAea,OAAf,CAAuBC,IAAI,IAAI;AAC/B,UAAIA,IAAI,CAACC,IAAL,CAAUC,KAAV,CAAgBL,MAAhB,CAAJ,EAA6B;AAC3BN,QAAAA,SAAS,CAACY,IAAV,CAAeH,IAAI,CAACC,IAApB;AACD;AACF,KAJC;AAMF,6BACKP,KADL;AAEEH,MAAAA;AAFF;AAID,GAxB8C;AA0B/C,GAACT,KAAK,CAACsB,cAAP,GAAwB,CAACV,KAAD,EAAQ;AAACW,IAAAA;AAAD,GAAR,KAAiB;AAEvC,UAAMC,sBAAsB,GAAG,CAAC,GAAGZ,KAAK,CAACR,QAAV,CAA/B;AAEA,QAAIqB,aAAJ;AAEAD,IAAAA,sBAAsB,CAACP,OAAvB,CAA+B,CAACS,OAAD,EAAUC,KAAV,KAAoB;AACjD,UAAGD,OAAO,CAACH,EAAR,KAAeA,EAAlB,EAAsB;AACpBE,QAAAA,aAAa,GAAGE,KAAhB;AACD;AACF,KAJD;AAMAH,IAAAA,sBAAsB,CAACI,MAAvB,CAA8BH,aAA9B,EAA4C,CAA5C;AACAlB,IAAAA,YAAY,CAACsB,OAAb,CAAqB,UAArB,EAAiCxB,IAAI,CAACyB,SAAL,CAAeN,sBAAf,CAAjC;AAEA,6BACKZ,KADL;AAEER,MAAAA,QAAQ,EAAEoB;AAFZ;AAID,GA7C8C;AA+C/C,GAACxB,KAAK,CAAC+B,KAAP,GAAiBnB,KAAD,IAAW;AAEzBL,IAAAA,YAAY,CAACsB,OAAb,CAAqB,UAArB,EAAiCxB,IAAI,CAACyB,SAAL,CAAe5B,eAAf,CAAjC;AAEA,6BACKU,KADL;AAEER,MAAAA,QAAQ,EAAEF;AAFZ;AAID;AAvD8C,CAA5B,CAArB;AA2DA,eAAeQ,YAAf","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from \"../../../api/contacts\";\n\n\n\nconst initialState = {\n  contacts: JSON.parse(localStorage.getItem(\"contacts\")),\n  findItems: contacts\n}\n\nconst startReducer = createReducer(initialState)({\n\n  [types.SORT]: (state, {payload}) => {    \n    return{\n      ...state,\n      contacts: payload\n    }\n  },\n\n  [types.FIND]: (state, {payload}) => {\n      let findItems = []\n\n      let regExp = new RegExp(`${payload}`, 'gi')\n\n      state.contacts.forEach(item => {\n      if (item.name.match(regExp)) {\n        findItems.push(item.name);\n      }\n    });\n\n    return{\n      ...state,\n      findItems\n    }\n  },\n\n  [types.DELETE_CONTACT]: (state, {id}) => {\n\n    const contactListAfterDelete = [...state.contacts];\n\n    let indexOfDelete;\n\n    contactListAfterDelete.forEach((contact, index) => {\n      if(contact.id === id ){\n        indexOfDelete = index;\n      }\n    })\n\n    contactListAfterDelete.splice(indexOfDelete,1);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListAfterDelete))\n    \n    return{\n      ...state,\n      contacts: contactListAfterDelete\n    }\n  },\n\n  [types.RESET] : (state) => {\n\n    localStorage.setItem('contacts', JSON.stringify(initialContacts));\n    \n    return{\n      ...state,\n      contacts: initialContacts\n    }\n  }\n\n});\n\nexport default startReducer;"]},"metadata":{},"sourceType":"module"}