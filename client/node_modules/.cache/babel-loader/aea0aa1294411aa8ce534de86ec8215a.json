{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialTasks from '../../../api/tasks';\nconst initialState = {\n  taskList: [],\n  allTasks: []\n};\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.ADD_TASK]: (state, {\n    payload\n  }) => {\n    const s = JSON.parse(localStorage.getItem('tasks'));\n    s.push({\n      id: Date.now(),\n      title: payload,\n      completed: false\n    });\n    localStorage.setItem('tasks', JSON.stringify(s));\n    return _objectSpread({}, state, {\n      allTasks: s\n    });\n  },\n  [types.INIT_TASKS]: state => {\n    let storeTask = JSON.parse(localStorage.getItem(\"tasks\"));\n\n    if (storeTask) {\n      return _objectSpread({}, state, {\n        allTasks: storeTask\n      });\n    } else {\n      localStorage.setItem('tasks', JSON.stringify(initialTasks));\n      return _objectSpread({}, state, {\n        allTasks: initialTasks\n      });\n    }\n  },\n  [types.COMPLETE_TASK]: (state, {\n    id\n  }) => {\n    let allTasksUpdate = [...state.allTasks];\n    allTasksUpdate.map(task => {\n      if (task.id === parseInt(id)) {\n        //&& task.completed===false\n        task.completed = !task.completed;\n      }\n    });\n    localStorage.setItem(\"tasks\", JSON.stringify(allTasksUpdate));\n    return {\n      allTasks: allTasksUpdate\n    };\n  }\n});\nexport default taskReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/task/reducers.js"],"names":["types","createReducer","initialTasks","initialState","taskList","allTasks","taskReducer","ADD_TASK","state","payload","s","JSON","parse","localStorage","getItem","push","id","Date","now","title","completed","setItem","stringify","INIT_TASKS","storeTask","COMPLETE_TASK","allTasksUpdate","map","task","parseInt"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAC,EADU;AAEnBC,EAAAA,QAAQ,EAAE;AAFS,CAArB;AAKA,MAAMC,WAAW,GAAGL,aAAa,CAACE,YAAD,CAAb,CAA4B;AAC9C;AACA,GAACH,KAAK,CAACO,QAAP,GAAkB,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,KAAwB;AACxC,UAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAV;AACAJ,IAAAA,CAAC,CAACK,IAAF,CAAO;AACLC,MAAAA,EAAE,EAAGC,IAAI,CAACC,GAAL,EADA;AAELC,MAAAA,KAAK,EAAEV,OAFF;AAGLW,MAAAA,SAAS,EAAE;AAHN,KAAP;AAMAP,IAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACW,SAAL,CAAeZ,CAAf,CAA9B;AAEA,6BACKF,KADL;AAEEH,MAAAA,QAAQ,EAAEK;AAFZ;AAID,GAhB6C;AAkB9C,GAACV,KAAK,CAACuB,UAAP,GAAqBf,KAAD,IAAW;AAC7B,QAAIgB,SAAS,GAAGb,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAhB;;AACA,QAAGU,SAAH,EAAa;AACX,+BACKhB,KADL;AAEEH,QAAAA,QAAQ,EAAEmB;AAFZ;AAID,KALD,MAMI;AACFX,MAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACW,SAAL,CAAepB,YAAf,CAA9B;AACA,+BACKM,KADL;AAEEH,QAAAA,QAAQ,EAAEH;AAFZ;AAID;AACF,GAjC6C;AAmC9C,GAACF,KAAK,CAACyB,aAAP,GAAwB,CAACjB,KAAD,EAAQ;AAACQ,IAAAA;AAAD,GAAR,KAAiB;AAEvC,QAAIU,cAAc,GAAG,CAAC,GAAGlB,KAAK,CAACH,QAAV,CAArB;AAEAqB,IAAAA,cAAc,CAACC,GAAf,CAAmBC,IAAI,IAAI;AACzB,UAAGA,IAAI,CAACZ,EAAL,KAAYa,QAAQ,CAACb,EAAD,CAAvB,EAA6B;AAAE;AAC7BY,QAAAA,IAAI,CAACR,SAAL,GAAiB,CAACQ,IAAI,CAACR,SAAvB;AACD;AACF,KAJD;AAMAP,IAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACW,SAAL,CAAeI,cAAf,CAA9B;AAEA,WAAM;AACJrB,MAAAA,QAAQ,EAAEqB;AADN,KAAN;AAGD;AAlD6C,CAA5B,CAApB;AAqDA,eAAepB,WAAf","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\"\nimport initialTasks from '../../../api/tasks'\n\n\nconst initialState = {\n  taskList:[],\n  allTasks: []\n}\n\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.ADD_TASK]: (state, { payload }) => {\n    const s = JSON.parse(localStorage.getItem('tasks'));\n    s.push({\n      id : Date.now(),\n      title: payload,\n      completed: false\n    })\n    \n    localStorage.setItem('tasks', JSON.stringify(s))\n    \n    return{\n      ...state,\n      allTasks: s\n    }\n  },\n\n  [types.INIT_TASKS]: (state) => {\n    let storeTask = JSON.parse(localStorage.getItem(\"tasks\"));\n    if(storeTask){\n      return{\n        ...state,\n        allTasks: storeTask\n      }\n    }\n    else{\n      localStorage.setItem('tasks', JSON.stringify(initialTasks))\n      return{\n        ...state,\n        allTasks: initialTasks\n      }\n    }\n  },\n\n  [types.COMPLETE_TASK] : (state, {id}) => {\n\n    let allTasksUpdate = [...state.allTasks];\n\n    allTasksUpdate.map(task => {\n      if(task.id === parseInt(id) ){ //&& task.completed===false\n        task.completed = !task.completed\n      }\n    });\n\n    localStorage.setItem(\"tasks\", JSON.stringify(allTasksUpdate))\n\n    return{\n      allTasks: allTasksUpdate\n    }\n  }\n});\n\nexport default taskReducer;"]},"metadata":{},"sourceType":"module"}