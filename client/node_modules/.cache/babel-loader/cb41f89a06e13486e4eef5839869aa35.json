{"ast":null,"code":"var _jsxFileName = \"/home/evgeny/Public/reduxtraine/my-app/src/views/pages/Trello/TaskList.js\";\nimport React from 'react';\nimport TaskItem from './TaskItem';\nimport { connect } from 'react-redux';\nimport { taskComplete } from '../../../state/ducks/task/actions';\n\nconst TaskList = ({\n  allTasks,\n  taskComplete\n}) => {\n  const dragNDrop = e => {\n    const dragItem = e.target;\n\n    dragItem.ondragstart = function () {\n      return false;\n    };\n\n    let currentDroppable = null;\n\n    dragItem.onmousedown = e => {\n      dragItem.style.position = 'absolute';\n      dragItem.style.zIndex = 1000;\n      let shiftX = e.clientX - dragItem.getBoundingClientRect().left;\n      let shiftY = e.clientY - dragItem.getBoundingClientRect().top;\n      document.body.append(dragItem);\n      moveAt(e.pageX, e.pageY);\n\n      function moveAt(pageX, pageY) {\n        dragItem.style.left = pageX - shiftX + 'px';\n        dragItem.style.top = pageY - shiftY + 'px';\n      }\n\n      function onMouseMove(e) {\n        moveAt(e.pageX, e.pageY);\n        console.log(currentDroppable);\n        dragItem.hidden = true;\n        let elemBelow = document.elementFromPoint(e.clientX, e.clientY);\n        dragItem.hidden = false;\n        if (!elemBelow) return; // предположительная точка \"посадки\" Drag’n’Drop функции \n\n        let droppableBelow = elemBelow.closest('.finished');\n        let droppableBelowBak = elemBelow.closest('.not-finished');\n\n        if (currentDroppable != droppableBelow) {\n          if (currentDroppable) {\n            // логика обработки процесса \"вылета\" из finished (удаляем подсветку)\n            leaveDroppable(currentDroppable);\n          }\n\n          currentDroppable = droppableBelow;\n\n          if (currentDroppable) {\n            // логика обработки процесса, когда мы \"влетаем\" в элемент finished\n            enterDroppable(currentDroppable);\n          }\n        }\n      }\n\n      document.addEventListener('mousemove', onMouseMove);\n\n      dragItem.onmouseup = e => {\n        //смотрим что \"под\" курсором и под перетаскиваемым элементом\n        dragItem.hidden = true;\n        let elemBelow = document.elementFromPoint(e.clientX, e.clientY);\n        dragItem.hidden = false; //проверка на расположение зоны дропа в нужном месте\n\n        let droppableBelow = elemBelow.closest('.finished');\n        let droppableBelowBak = elemBelow.closest('.not-finished');\n        console.log(droppableBelowBak); // элемент в котором лежит зона дропа (проверка на \"родителя\" = not-finished? )\n\n        if (currentDroppable === elemBelow && currentDroppable === droppableBelow) {\n          // console.log('курсор находится над ЗЕЛЁНОЙ зоной дропа и мышь была отпущена');\n          taskComplete(dragItem.id);\n        }\n\n        if (elemBelow === droppableBelowBak) {} // console.log('курсор находится над крассной зоной дропа и мышь была отпущена');\n        // console.log(currentDroppable);// текущая зона для дропа\n        // console.log(elemBelow); //элемент который \"снизу\" под курсором во время отжатия клавиши\n        // console.log(droppableBelow);// элемент в котором лежит зона дропа (проверка на \"родителя\" = finished )\n\n\n        document.removeEventListener('mousemove', onMouseMove);\n        dragItem.onmouseup = null;\n      };\n    };\n\n    function enterDroppable(elem) {\n      elem.style.background = '#afe892';\n    }\n\n    function leaveDroppable(elem) {\n      elem.style.background = '';\n    }\n\n    function enterDroppBack(elem) {\n      elem.style.background = 'red';\n    }\n\n    function leaveDroppBack(elem) {\n      elem.style.background = '';\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Task list:\"), React.createElement(\"div\", {\n    className: \"taskList taskListHeader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Unfinished tasks\"), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Finished tasks\")), React.createElement(\"div\", {\n    className: \"taskList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"not-finished\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, allTasks.map((task, index) => {\n    if (!task.completed) {\n      return React.createElement(\"li\", {\n        className: \"taskItem\",\n        key: task.id,\n        onMouseOver: dragNDrop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(TaskItem, {\n        task: task,\n        key: task.id,\n        index: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }));\n    }\n  }))), React.createElement(\"div\", {\n    className: \"finished\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, allTasks.map((task, index) => {\n    if (task.completed) {\n      return React.createElement(\"li\", {\n        className: \"taskItem\",\n        key: task.id,\n        onMouseOver: dragNDrop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(TaskItem, {\n        task: task,\n        key: task.id,\n        index: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }));\n    }\n  })))));\n};\n\nconst mapStateToProps = ({\n  allTasks: {\n    allTasks\n  }\n}) => ({\n  allTasks\n});\n\nconst mapDispatchToProps = {\n  taskComplete\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/views/pages/Trello/TaskList.js"],"names":["React","TaskItem","connect","taskComplete","TaskList","allTasks","dragNDrop","e","dragItem","target","ondragstart","currentDroppable","onmousedown","style","position","zIndex","shiftX","clientX","getBoundingClientRect","left","shiftY","clientY","top","document","body","append","moveAt","pageX","pageY","onMouseMove","console","log","hidden","elemBelow","elementFromPoint","droppableBelow","closest","droppableBelowBak","leaveDroppable","enterDroppable","addEventListener","onmouseup","id","removeEventListener","elem","background","enterDroppBack","leaveDroppBack","map","task","index","completed","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport TaskItem from './TaskItem';\nimport { connect } from 'react-redux';\nimport {taskComplete} from '../../../state/ducks/task/actions'\n\n\nconst TaskList = ( {allTasks, taskComplete}) => {\n  const dragNDrop = (e) => {\n    const dragItem = e.target;\n    \n    dragItem.ondragstart = function() {\n      return false;\n    };\n    let currentDroppable = null;\n    \n    dragItem.onmousedown = e => {\n      dragItem.style.position = 'absolute'\n      dragItem.style.zIndex = 1000;\n  \n      let shiftX = e.clientX - dragItem.getBoundingClientRect().left;\n      let shiftY = e.clientY - dragItem.getBoundingClientRect().top;\n  \n      document.body.append(dragItem);\n  \n      moveAt(e.pageX, e.pageY);\n      \n      function moveAt(pageX, pageY){\n        dragItem.style.left = pageX - shiftX +'px'\n        dragItem.style.top = pageY - shiftY +'px'\n      }\n  \n      function onMouseMove(e) {\n        moveAt(e.pageX, e.pageY);\n        \n        console.log(currentDroppable);\n  \n        dragItem.hidden = true;\n        let elemBelow = document.elementFromPoint(e.clientX, e.clientY);\n        dragItem.hidden = false;\n  \n        if (!elemBelow) return;\n  \n        // предположительная точка \"посадки\" Drag’n’Drop функции \n        let droppableBelow = elemBelow.closest('.finished');\n        let droppableBelowBak = elemBelow.closest('.not-finished')\n  \n  \n        if (currentDroppable != droppableBelow) {\n          if (currentDroppable) {\n            // логика обработки процесса \"вылета\" из finished (удаляем подсветку)\n            leaveDroppable(currentDroppable);\n          }\n          currentDroppable = droppableBelow;\n          if (currentDroppable) {\n            // логика обработки процесса, когда мы \"влетаем\" в элемент finished\n            enterDroppable(currentDroppable);\n          }\n        }\n  \n      }\n  \n      document.addEventListener('mousemove', onMouseMove);\n  \n      dragItem.onmouseup = (e) => {\n        //смотрим что \"под\" курсором и под перетаскиваемым элементом\n        dragItem.hidden = true;\n        let elemBelow = document.elementFromPoint(e.clientX, e.clientY);\n        dragItem.hidden = false;\n        //проверка на расположение зоны дропа в нужном месте\n        let droppableBelow = elemBelow.closest('.finished');\n        let droppableBelowBak = elemBelow.closest('.not-finished')\n        \n        console.log(droppableBelowBak); // элемент в котором лежит зона дропа (проверка на \"родителя\" = not-finished? )\n\n  \n        if(currentDroppable === elemBelow && currentDroppable === droppableBelow){\n          // console.log('курсор находится над ЗЕЛЁНОЙ зоной дропа и мышь была отпущена');\n          taskComplete(dragItem.id);\n\n        }\n        if(elemBelow === droppableBelowBak){\n          // console.log('курсор находится над крассной зоной дропа и мышь была отпущена');\n        }\n        \n        // console.log(currentDroppable);// текущая зона для дропа\n        // console.log(elemBelow); //элемент который \"снизу\" под курсором во время отжатия клавиши\n        // console.log(droppableBelow);// элемент в котором лежит зона дропа (проверка на \"родителя\" = finished )\n  \n  \n        document.removeEventListener('mousemove', onMouseMove);\n        dragItem.onmouseup = null;\n  \n      };\n    }\n    \n    function enterDroppable(elem) {\n      elem.style.background = '#afe892';\n    }\n  \n    function leaveDroppable(elem) {\n      elem.style.background = '';\n    }\n\n    function enterDroppBack(elem) {\n      elem.style.background = 'red';\n    }\n\n    function leaveDroppBack(elem){\n      elem.style.background = ''\n    }\n    \n    \n  \n  }\n  \n\n  return(\n      <>\n      <label>Task list:</label>\n\n      <div className='taskList taskListHeader'>\n        <label>Unfinished tasks</label>\n        <label>Finished tasks</label>\n      </div>\n      \n      <div className=\"taskList\">\n        \n        <div className='not-finished'>\n        <ul>\n          {allTasks.map((task, index) => {\n            if(!task.completed){\n             return <li className='taskItem'\n                        key={task.id}\n                        onMouseOver={dragNDrop}\n                        >\n                <TaskItem task={task} key={task.id} index={index} />\n              </li>\n            }\n          })\n          }\n        </ul>\n        </div>\n        <div className='finished'>\n          <ul>\n            {allTasks.map((task, index)=> {\n              if(task.completed){\n                return <li className='taskItem'\n                           key={task.id}\n                          onMouseOver={dragNDrop}\n                          >\n                  <TaskItem task={task} key={task.id} index={index} />\n                  </li>\n              }\n            })\n            }\n          </ul>\n        </div>\n    </div>\n    </>\n  )\n}\n\n\nconst mapStateToProps = ({ allTasks: { allTasks } }) => ({ allTasks });\n\nconst mapDispatchToProps = { taskComplete };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);"]},"metadata":{},"sourceType":"module"}