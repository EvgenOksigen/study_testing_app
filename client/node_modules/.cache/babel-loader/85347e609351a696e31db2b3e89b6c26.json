{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from '../../../api/contacts';\nconst initialState = {\n  contacts: initialContacts,\n  findItems: initialContacts.map(item => item.name)\n};\nconst startReducer = createReducer(initialState)({\n  [types.SORT]: (state, {\n    payload\n  }) => {\n    return _objectSpread({}, state, {\n      contacts: payload\n    });\n  },\n  [types.FIND]: (state, {\n    payload\n  }) => {\n    const findItems = [];\n    let regExp = new RegExp(`${payload}`, 'gi');\n    state.contacts.forEach(item => {\n      if (item.name.match(regExp)) {\n        findItems.push(item.name);\n      }\n    });\n    return _objectSpread({}, state, {\n      findItems\n    });\n  },\n  [types.DELETE_CONTACT]: (state, {\n    id\n  }) => {\n    const contactListAfterDelete = [...state.contacts];\n    let indexOfDelete;\n    contactListAfterDelete.forEach((contact, index) => {\n      if (contact.id === id) {\n        indexOfDelete = index;\n      }\n    });\n    contactListAfterDelete.splice(indexOfDelete, 1);\n    localStorage.setItem('token');\n    const localContacts = localStorage.getItem(\"contacts\");\n    return _objectSpread({}, state, {\n      contacts: contactListAfterDelete\n    });\n  }\n});\nexport default startReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/search/reducers.js"],"names":["types","createReducer","initialContacts","initialState","contacts","findItems","map","item","name","startReducer","SORT","state","payload","FIND","regExp","RegExp","forEach","match","push","DELETE_CONTACT","id","contactListAfterDelete","indexOfDelete","contact","index","splice","localStorage","setItem","localContacts","getItem"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAEF,eADS;AAEnBG,EAAAA,SAAS,EAAEH,eAAe,CAACI,GAAhB,CAAoBC,IAAI,IAAIA,IAAI,CAACC,IAAjC;AAFQ,CAArB;AAKA,MAAMC,YAAY,GAAGR,aAAa,CAACE,YAAD,CAAb,CAA4B;AAE/C,GAACH,KAAK,CAACU,IAAP,GAAc,CAACC,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAsB;AAClC,6BACKD,KADL;AAEEP,MAAAA,QAAQ,EAAEQ;AAFZ;AAID,GAP8C;AAS/C,GAACZ,KAAK,CAACa,IAAP,GAAc,CAACF,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAsB;AAChC,UAAMP,SAAS,GAAG,EAAlB;AAEA,QAAIS,MAAM,GAAG,IAAIC,MAAJ,CAAY,GAAEH,OAAQ,EAAtB,EAAyB,IAAzB,CAAb;AAEAD,IAAAA,KAAK,CAACP,QAAN,CAAeY,OAAf,CAAuBT,IAAI,IAAI;AAC/B,UAAIA,IAAI,CAACC,IAAL,CAAUS,KAAV,CAAgBH,MAAhB,CAAJ,EAA6B;AAC3BT,QAAAA,SAAS,CAACa,IAAV,CAAeX,IAAI,CAACC,IAApB;AACD;AACF,KAJC;AAMF,6BACKG,KADL;AAEEN,MAAAA;AAFF;AAID,GAxB8C;AA0B/C,GAACL,KAAK,CAACmB,cAAP,GAAwB,CAACR,KAAD,EAAQ;AAACS,IAAAA;AAAD,GAAR,KAAiB;AAEvC,UAAMC,sBAAsB,GAAG,CAAC,GAAGV,KAAK,CAACP,QAAV,CAA/B;AAEA,QAAIkB,aAAJ;AAEAD,IAAAA,sBAAsB,CAACL,OAAvB,CAA+B,CAACO,OAAD,EAAUC,KAAV,KAAoB;AACjD,UAAGD,OAAO,CAACH,EAAR,KAAeA,EAAlB,EAAsB;AACpBE,QAAAA,aAAa,GAAGE,KAAhB;AACD;AACF,KAJD;AAMAH,IAAAA,sBAAsB,CAACI,MAAvB,CAA8BH,aAA9B,EAA4C,CAA5C;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB;AACA,UAAMC,aAAa,GAAGF,YAAY,CAACG,OAAb,CAAqB,UAArB,CAAtB;AAEA,6BACKlB,KADL;AAEEP,MAAAA,QAAQ,EAAEiB;AAFZ;AAID;AA9C8C,CAA5B,CAArB;AAkDA,eAAeZ,YAAf","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from '../../../api/contacts';\n\n\nconst initialState = {\n  contacts: initialContacts,\n  findItems: initialContacts.map(item => item.name)\n}\n\nconst startReducer = createReducer(initialState)({\n\n  [types.SORT]: (state, {payload}) => {\n    return{\n      ...state,\n      contacts: payload\n    }\n  },\n\n  [types.FIND]: (state, {payload}) => {\n      const findItems = []\n\n      let regExp = new RegExp(`${payload}`, 'gi')\n\n      state.contacts.forEach(item => {\n      if (item.name.match(regExp)) {\n        findItems.push(item.name);\n      }\n    });\n\n    return{\n      ...state,\n      findItems\n    }\n  },\n\n  [types.DELETE_CONTACT]: (state, {id}) => {\n\n    const contactListAfterDelete = [...state.contacts];\n\n    let indexOfDelete;\n\n    contactListAfterDelete.forEach((contact, index) => {\n      if(contact.id === id ){\n        indexOfDelete = index;\n      }\n    })\n\n    contactListAfterDelete.splice(indexOfDelete,1);\n    localStorage.setItem('token', )\n    const localContacts = localStorage.getItem(\"contacts\");\n    \n    return{\n      ...state,\n      contacts: contactListAfterDelete\n    }\n  }\n\n});\n\nexport default startReducer;"]},"metadata":{},"sourceType":"module"}