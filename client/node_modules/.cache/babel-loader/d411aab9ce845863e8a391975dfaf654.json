{"ast":null,"code":"var _jsxFileName = \"/home/evgeny/Public/reduxtraine/my-app/src/views/pages/Trello/TaskItem.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { dragItemToColumn } from '../../../state/ducks/task/actions';\n\nconst TaskItem = ({\n  task,\n  column,\n  allTasks,\n  taskList,\n  dragItemToColumn\n}) => {\n  const dragNDrop = e => {\n    // const dragItemParentClone = e.target.parentNode.cloneNode(true);\n    const dragItem = e.target; // const dragItem = e.target.cloneNode(true);\n\n    dragItem.ondragstart = function () {\n      return false;\n    };\n\n    dragItem.onmousedown = e => {\n      document.addEventListener('mousemove', onMouseMove);\n      const currentColumnId = dragItem.attributes['column'].value;\n      dragItem.style.position = 'absolute';\n      dragItem.style.zIndex = 1000;\n      let shiftX = e.clientX - dragItem.getBoundingClientRect().left;\n      let shiftY = e.clientY - dragItem.getBoundingClientRect().top;\n      const oldParent = dragItem.parentNode.cloneNode(true);\n      document.body.append(dragItem);\n      moveAt(e.pageX, e.pageY);\n\n      function moveAt(pageX, pageY) {\n        dragItem.style.left = pageX - shiftX + 'px';\n        dragItem.style.top = pageY - shiftY + 'px';\n      }\n\n      function onMouseMove(e) {\n        moveAt(e.pageX, e.pageY);\n        dragItem.style.transform = 'rotate(3deg)';\n        dragItem.hidden = true;\n        let elemBelow = document.elementFromPoint(e.clientX, e.clientY);\n        dragItem.hidden = false;\n        if (!elemBelow) return;\n      }\n\n      dragItem.onmouseup = e => {\n        //\n        dragItem.hidden = true;\n        let elemBelow = document.elementFromPoint(e.clientX, e.clientY);\n        dragItem.hidden = false; // let droppableBelow = elemBelow.closest(`.${dragItem.id}`);\n\n        if (elemBelow.id === currentColumnId) {\n          if (elemBelow.className === 'task-list-wrapper') {\n            dragItem.style.position = '';\n            dragItem.style.left = '';\n            dragItem.style.top = '';\n            dragItem.style.zIndex = '';\n            dragItem.style.transform = '';\n            dragItem.attributes['column'].value = elemBelow.id;\n            oldParent.append(dragItem);\n          }\n        } else {\n          if (elemBelow.id !== currentColumnId) {\n            // console.log(dragItem.id);\n            let targetTask;\n            allTasks.map(task => {\n              if (task.id === parseInt(dragItem.id)) {\n                task.status = parseInt(elemBelow.id);\n                targetTask = task;\n              }\n            }); // console.log(elemBelow.id);\n\n            dragItem.style.position = '';\n            dragItem.style.left = '';\n            dragItem.style.top = '';\n            dragItem.style.zIndex = '';\n            dragItem.style.transform = '';\n            dragItem.attributes['column'].value = elemBelow.id;\n            elemBelow.children[0].children[1].children[0].append(oldParent);\n            oldParent.append(dragItem);\n            taskList[elemBelow.id].tasks.push(targetTask);\n            console.log(taskList[elemBelow.id].tasks); // HATE THIS !\n\n            dragItemToColumn(elemBelow.id, dragItem.id); // dragItem.remove()\n            // oldParent.remove()\n          }\n        }\n\n        document.removeEventListener('mousemove', onMouseMove);\n        dragItem.onmouseup = null;\n      };\n    }; // function enterDroppable(elem) {\n    //   elem.style.background = '#afe892';\n    // }\n    // function enterDroppableBack(elem) {\n    //   elem.style.background = 'pink';\n    // }\n    // function leaveDroppable(elem) {\n    //   elem.style.background = '';\n    // }\n\n  };\n\n  const style = {\n    span: {\n      display: 'block',\n      maxWidth: '250px',\n      width: '100%'\n    }\n  };\n  return React.createElement(\"span\", {\n    className: \"task-item\",\n    style: style.span,\n    onMouseOver: dragNDrop,\n    id: task.id,\n    column: column,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, task.title);\n};\n\nconst mapStateToProps = ({\n  allTasks: {\n    allTasks,\n    taskList\n  }\n}) => ({\n  allTasks,\n  taskList\n});\n\nconst mapDispatchToProps = {\n  dragItemToColumn\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItem);","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/views/pages/Trello/TaskItem.js"],"names":["React","connect","dragItemToColumn","TaskItem","task","column","allTasks","taskList","dragNDrop","e","dragItem","target","ondragstart","onmousedown","document","addEventListener","onMouseMove","currentColumnId","attributes","value","style","position","zIndex","shiftX","clientX","getBoundingClientRect","left","shiftY","clientY","top","oldParent","parentNode","cloneNode","body","append","moveAt","pageX","pageY","transform","hidden","elemBelow","elementFromPoint","onmouseup","id","className","targetTask","map","parseInt","status","children","tasks","push","console","log","removeEventListener","span","display","maxWidth","width","title","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux';\nimport { dragItemToColumn } from '../../../state/ducks/task/actions';\n\nconst TaskItem = ({task, column, allTasks, taskList, dragItemToColumn}) =>{\n  const dragNDrop = (e) => {\n    // const dragItemParentClone = e.target.parentNode.cloneNode(true);\n    const dragItem = e.target;\n\n    // const dragItem = e.target.cloneNode(true);\n    \n    dragItem.ondragstart = function() {\n      return false;\n    };\n    \n    dragItem.onmousedown = e => {\n      document.addEventListener('mousemove', onMouseMove);\n\n      const currentColumnId = dragItem.attributes['column'].value;\n      \n      dragItem.style.position = 'absolute'\n      dragItem.style.zIndex = 1000;\n      \n      let shiftX = e.clientX - dragItem.getBoundingClientRect().left;\n      let shiftY = e.clientY - dragItem.getBoundingClientRect().top;\n      \n      const oldParent = dragItem.parentNode.cloneNode(true);\n\n      document.body.append(dragItem);\n      \n\n      moveAt(e.pageX, e.pageY);\n      \n      function moveAt(pageX, pageY){\n        dragItem.style.left = pageX - shiftX +'px'\n        dragItem.style.top = pageY - shiftY +'px'\n      }\n  \n      function onMouseMove(e) {\n        moveAt(e.pageX, e.pageY);\n        dragItem.style.transform = 'rotate(3deg)'\n\n        dragItem.hidden = true;\n        let elemBelow = document.elementFromPoint(e.clientX, e.clientY);\n        dragItem.hidden = false;\n  \n        if (!elemBelow) return;\n        \n      }\n  \n  \n      dragItem.onmouseup = (e) => {\n        //\n        dragItem.hidden = true;\n        let elemBelow = document.elementFromPoint(e.clientX, e.clientY);\n        dragItem.hidden = false;\n        \n        // let droppableBelow = elemBelow.closest(`.${dragItem.id}`);\n\n        if (elemBelow.id === currentColumnId) {\n          if(elemBelow.className === 'task-list-wrapper') {\n            dragItem.style.position = ''\n            dragItem.style.left = ''\n            dragItem.style.top = ''\n            dragItem.style.zIndex = '';\n            dragItem.style.transform = ''\n            dragItem.attributes['column'].value = elemBelow.id\n            oldParent.append(dragItem)\n          }\n        } else { \n          if(elemBelow.id !== currentColumnId){\n            \n            // console.log(dragItem.id);\n            \n            let targetTask\n            \n            allTasks.map(task=>{ \n              if(task.id === parseInt(dragItem.id)){\n                task.status = parseInt(elemBelow.id)\n                targetTask = task                \n              }\n            });\n\n            // console.log(elemBelow.id);\n\n            dragItem.style.position = ''\n            dragItem.style.left = ''\n            dragItem.style.top = ''\n            dragItem.style.zIndex = '';\n            dragItem.style.transform = ''\n            dragItem.attributes['column'].value = elemBelow.id\n            elemBelow.children[0].children[1].children[0].append(oldParent)\n            oldParent.append(dragItem)\n            taskList[elemBelow.id].tasks.push(targetTask)\n\n            console.log(taskList[elemBelow.id].tasks);\n\n            \n            \n            // HATE THIS !\n            dragItemToColumn(elemBelow.id, dragItem.id)\n            // dragItem.remove()\n            // oldParent.remove()\n          }\n        }\n\n  \n          document.removeEventListener('mousemove', onMouseMove);\n          dragItem.onmouseup = null;\n  \n      };\n    }\n    \n    // function enterDroppable(elem) {\n    //   elem.style.background = '#afe892';\n    // }\n  \n    // function enterDroppableBack(elem) {\n    //   elem.style.background = 'pink';\n    // }\n    \n    // function leaveDroppable(elem) {\n    //   elem.style.background = '';\n    // }\n\n  }\n\n  \n  const style = {\n    span:{\n      display: 'block',\n      maxWidth:'250px',\n      width:'100%',\n    }\n  }\n  \n  return(\n  <span className='task-item'\n      style={style.span}\n      onMouseOver={dragNDrop}\n      id={task.id}\n      column={column}\n      >\n        {task.title}\n  </span>\n    )\n}\n\nconst mapStateToProps = ({ allTasks: { allTasks, taskList } }) => ({allTasks, taskList});\nconst mapDispatchToProps = { dragItemToColumn };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItem);"]},"metadata":{},"sourceType":"module"}