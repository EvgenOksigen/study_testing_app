{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from \"../../../api/contacts\";\nconst initialState = {\n  data: [],\n  findItems: []\n};\nconst startReducer = createReducer(initialState)({\n  //\n  [types.INIT_CONTACTS]: (state, {\n    data\n  }) => {\n    return _objectSpread({}, state, {\n      data,\n      findItems: []\n    });\n  },\n  [types.SORT]: (state, {\n    payload\n  }) => {\n    console.log(payload);\n    let data = state.data.sort((a, b) => a.name !== b.name ? a.name < b.name ? -1 : 1 : 0);\n    return _objectSpread({}, state, {\n      data\n    });\n  },\n  [types.FIND]: (state, {\n    payload\n  }) => {\n    let findItems = [];\n    let regExp = new RegExp(`${payload}`, 'gi');\n    state.data.forEach(item => {\n      if (item.name.match(regExp)) {\n        findItems.push(item.name);\n      }\n    });\n    return _objectSpread({}, state, {\n      findItems\n    });\n  },\n  [types.DELETE_CONTACT]: (state, {\n    id\n  }) => {\n    const contactListAfterDelete = [...state.data];\n    let indexOfDelete;\n    contactListAfterDelete.forEach((contact, index) => {\n      if (contact.id === id) {\n        indexOfDelete = index;\n      }\n    });\n    contactListAfterDelete.splice(indexOfDelete, 1);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListAfterDelete));\n    return _objectSpread({}, state, {\n      findItems: contactListAfterDelete.map(item => item.name),\n      data: contactListAfterDelete\n    });\n  },\n  [types.RESET]: state => {\n    localStorage.setItem('contacts', JSON.stringify(initialContacts));\n    return _objectSpread({}, state, {\n      findItems: initialContacts.map(item => item.name),\n      data: initialContacts\n    });\n  }\n});\nexport default startReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/search/reducers.js"],"names":["types","createReducer","initialContacts","initialState","data","findItems","startReducer","INIT_CONTACTS","state","SORT","payload","console","log","sort","a","b","name","FIND","regExp","RegExp","forEach","item","match","push","DELETE_CONTACT","id","contactListAfterDelete","indexOfDelete","contact","index","splice","localStorage","setItem","JSON","stringify","map","RESET"],"mappings":"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","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialContacts from \"../../../api/contacts\";\n\nconst initialState = {\n  data: [], \n  findItems: [] \n}\n\nconst startReducer = createReducer(initialState)({\n //\n [types.INIT_CONTACTS]: (state, {data}) => {\n\n  return{\n    ...state,\n    data,\n    findItems:[]\n  }\n},\n\n  [types.SORT]: (state, {payload}) => {   \n    console.log(payload)\n\n    let data = state.data.sort((a, b) =>\n        a.name !== b.name ? (a.name < b.name ? -1 : 1) : 0)\n    return{\n      ...state,\n      data\n    }\n  },\n\n  [types.FIND]: (state, {payload}) => {\n      let findItems = []\n\n      let regExp = new RegExp(`${payload}`, 'gi')\n\n      state.data.forEach(item => {\n      if (item.name.match(regExp)) {\n        findItems.push(item.name);\n      }\n    });\n\n    return{\n      ...state,\n      findItems\n    }\n  },\n\n  [types.DELETE_CONTACT]: (state, {id}) => {\n\n    const contactListAfterDelete = [...state.data];\n\n    let indexOfDelete;\n\n    contactListAfterDelete.forEach((contact, index) => {\n      if(contact.id === id ){\n        indexOfDelete = index;\n      }\n    })\n\n    contactListAfterDelete.splice(indexOfDelete,1);\n    localStorage.setItem(\"contacts\", JSON.stringify(contactListAfterDelete))\n    \n    return{\n      ...state,\n      findItems: contactListAfterDelete.map(item=>item.name),\n      data: contactListAfterDelete\n    }\n  },\n\n  [types.RESET] : (state) => {\n\n    localStorage.setItem('contacts', JSON.stringify(initialContacts));\n    \n    return{\n      ...state,\n      findItems:initialContacts.map(item=>item.name),\n      data: initialContacts\n    }\n  }\n\n});\n\nexport default startReducer;"]},"metadata":{},"sourceType":"module"}