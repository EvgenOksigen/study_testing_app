{"ast":null,"code":"import _objectSpread from \"/home/evgeny/Public/reduxtraine/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\";\nimport initialTasks from '../../../api/tasks';\nimport initialTaskLists from \"../../../api/taskList\";\nconst initialState = {\n  taskList: [],\n  allTasks: []\n};\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.ADD_TASK]: (state, {\n    title,\n    id\n  }) => {\n    const s = JSON.parse(localStorage.getItem('tasks'));\n    s.push({\n      id: state.allTasks.length,\n      title: title,\n      status: id\n    });\n    let columns = state.taskList;\n    console.log(columns);\n    initialTaskLists.map(item => {\n      initialTasks.map(task => {\n        if (task.status === item.id) {\n          item.tasks.push(task);\n        }\n      });\n    });\n    localStorage.setItem('tasks', JSON.stringify(s));\n    return _objectSpread({}, state, {\n      allTasks: s\n    });\n  },\n  [types.INIT_TASKS]: state => {\n    initialTaskLists.map(item => {\n      initialTasks.map(task => {\n        if (task.status === item.id) {\n          item.tasks.push(task);\n        }\n      }); //  console.log(item.tasks);\n    });\n    let storeTaskList = JSON.parse(localStorage.getItem(\"tasks-list\"));\n    let storeTask = JSON.parse(localStorage.getItem(\"tasks\"));\n\n    if (storeTask) {\n      return _objectSpread({}, state, {\n        taskList: storeTaskList,\n        allTasks: storeTask\n      });\n    } else {\n      localStorage.setItem('tasks-list', JSON.stringify(initialTaskLists));\n      localStorage.setItem('tasks', JSON.stringify(initialTasks));\n      return _objectSpread({}, state, {\n        taskList: initialTaskLists,\n        allTasks: initialTasks\n      });\n    }\n  },\n  [types.COMPLETE_TASK]: (state, {\n    id\n  }) => {\n    let allTasksUpdate = [...state.allTasks];\n    allTasksUpdate.map(task => {\n      if (task.id === parseInt(id)) {\n        //&& task.completed===false\n        task.completed = !task.completed;\n      }\n    });\n    localStorage.setItem(\"tasks\", JSON.stringify(allTasksUpdate));\n    return {\n      allTasks: allTasksUpdate\n    };\n  },\n  [types.CREATE_NEW_COLLUM]: (state, {\n    title\n  }) => {\n    const taskListUpdate = state.taskList;\n    let id = state.taskList.length;\n    let taskTitle = title.match(/\\w+/g).toLocaleString().replace(/[\\s.,%]/g, '');\n    taskListUpdate.push({\n      id: id,\n      title: taskTitle,\n      tasks: []\n    });\n    localStorage.setItem('tasks-list', JSON.stringify(taskListUpdate));\n    return _objectSpread({}, state, {\n      taskList: taskListUpdate\n    });\n  }\n});\nexport default taskReducer;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/state/ducks/task/reducers.js"],"names":["types","createReducer","initialTasks","initialTaskLists","initialState","taskList","allTasks","taskReducer","ADD_TASK","state","title","id","s","JSON","parse","localStorage","getItem","push","length","status","columns","console","log","map","item","task","tasks","setItem","stringify","INIT_TASKS","storeTaskList","storeTask","COMPLETE_TASK","allTasksUpdate","parseInt","completed","CREATE_NEW_COLLUM","taskListUpdate","taskTitle","match","toLocaleString","replace"],"mappings":"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","sourcesContent":["import * as types from \"./types\";\nimport createReducer from \"../../../utils/createReducer\"\nimport initialTasks from '../../../api/tasks'\nimport initialTaskLists from \"../../../api/taskList\";\n\nconst initialState = {\n  taskList:[],\n  allTasks: []\n}\n\nconst taskReducer = createReducer(initialState)({\n  //\n  [types.ADD_TASK]: (state, { title, id }) => {\n    const s = JSON.parse(localStorage.getItem('tasks'));\n\n    s.push({\n      id : state.allTasks.length,\n      title: title,\n      status: id\n    })\n    let columns = state.taskList;\n    console.log(columns);\n    \n    initialTaskLists.map(item => {\n      initialTasks.map(task => {\n        if(task.status === item.id){\n          item.tasks.push(task);\n        }\n       })\n    })\n\n    localStorage.setItem('tasks', JSON.stringify(s))\n    \n    return{\n      ...state,\n      allTasks: s\n    }\n  },\n\n  [types.INIT_TASKS]: (state) => {\n    initialTaskLists.map(item => {\n      initialTasks.map(task => {\n        if(task.status === item.id){\n          item.tasks.push(task);\n        }\n       })\n      //  console.log(item.tasks);\n    })\n\n\n    let storeTaskList = JSON.parse(localStorage.getItem(\"tasks-list\"));\n    let storeTask = JSON.parse(localStorage.getItem(\"tasks\"));\n    \n    if(storeTask){\n      return{\n        ...state,\n        taskList: storeTaskList,\n        allTasks: storeTask\n      }\n    }\n    else{\n      localStorage.setItem('tasks-list', JSON.stringify(initialTaskLists))\n      localStorage.setItem('tasks', JSON.stringify(initialTasks))\n\n      return{\n        ...state,\n        taskList: initialTaskLists,\n        allTasks: initialTasks\n      }\n    }\n  },\n\n  [types.COMPLETE_TASK] : (state, {id}) => {\n\n    let allTasksUpdate = [...state.allTasks];\n\n    allTasksUpdate.map(task => {\n      if(task.id === parseInt(id) ){ //&& task.completed===false\n        task.completed = !task.completed\n      }\n    });\n\n    localStorage.setItem(\"tasks\", JSON.stringify(allTasksUpdate))\n\n    return{\n      allTasks: allTasksUpdate\n    }\n  },\n\n  [types.CREATE_NEW_COLLUM] : (state, {title}) => {\n    \n    const taskListUpdate = state.taskList;\n    let id = state.taskList.length\n    let taskTitle = title.match(/\\w+/g).toLocaleString().replace(/[\\s.,%]/g, '')\n\n    taskListUpdate.push({\n        id:id,\n        title:taskTitle,\n        tasks:[]\n      })\n      \n      localStorage.setItem('tasks-list', JSON.stringify(taskListUpdate))\n\n    return{\n      ...state,\n      taskList: taskListUpdate,\n    }\n  }\n});\n\nexport default taskReducer;"]},"metadata":{},"sourceType":"module"}