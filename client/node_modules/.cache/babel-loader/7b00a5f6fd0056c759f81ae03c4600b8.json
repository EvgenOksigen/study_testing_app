{"ast":null,"code":"var _jsxFileName = \"/home/evgeny/Public/reduxtraine/my-app/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nfunction App() {\n  const scaleNames = {\n    c: 'Цельсия',\n    f: 'Фаренгейта'\n  };\n\n  function toCelsius(fahrenheit) {\n    return (fahrenheit - 32) * 5 / 9;\n  }\n\n  function toFahrenheit(celsius) {\n    return celsius * 9 / 5 + 32;\n  }\n\n  function tryConvert(temperature, convert) {\n    const input = parseFloat(temperature);\n\n    if (Number.isNaN(input)) {\n      return '';\n    }\n\n    const output = convert(input);\n    const rounded = Math.round(output * 1000) / 1000;\n    return rounded.toString;\n  }\n\n  class TemperatureInput extends React.Component {\n    constructor(props) {\n      super(props);\n      this.handleChange = this.handleChange.bind(this);\n      this.state = {\n        temperature: ''\n      };\n    }\n\n    handleChange(e) {\n      this.props.onTemperatureChange(e.target.value);\n    }\n\n    render() {\n      const temperature = this.props.temperature;\n      const scale = this.props.scale;\n      return React.createElement(\"fieldset\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0442\\u0435\\u043C\\u043F\\u0435\\u0440\\u0430\\u0442\\u0443\\u0440\\u0443 \\u0432 \\u0433\\u0440\\u0430\\u0434\\u0443\\u0441\\u0430\\u0445 \", scaleNames[scale], \":\"), React.createElement(\"input\", {\n        value: temperature,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }));\n    }\n\n  }\n\n  class Calculator extends React.Component {\n    constructor(props) {\n      super(props);\n      this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n      this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n      this.state = {\n        temperature: '',\n        scale: 'c'\n      };\n    }\n\n    handleCelsiusChange(temperature) {\n      this.setState({\n        scale: 'c',\n        temperature\n      });\n    }\n\n    handleFahrenheitChange(temperature) {\n      this.setState({\n        scale: 'f',\n        temperature\n      });\n    }\n\n    render() {\n      const scale = this.state.scale;\n      const temperature = this.state.temperature;\n      const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n      const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(TemperatureInput, {\n        scale: \"c\",\n        temperature: celsius,\n        onTemperatureChange: this.handleCelsiusChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), React.createElement(TemperatureInput, {\n        scale: \"f\",\n        temperature: fahrenheit,\n        onTemperatureChange: this.handleFahrenheitChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(BoilingVerdict, {\n        celsius: parseFloat(celsius),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }));\n    }\n\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Calculator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/evgeny/Public/reduxtraine/my-app/src/App.js"],"names":["React","App","scaleNames","c","f","toCelsius","fahrenheit","toFahrenheit","celsius","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","rounded","Math","round","toString","TemperatureInput","Component","constructor","props","handleChange","bind","state","e","onTemperatureChange","target","value","render","scale","Calculator","handleCelsiusChange","handleFahrenheitChange","setState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n\nfunction App() {\n\n  const scaleNames = {\n    c: 'Цельсия',\n    f: 'Фаренгейта'\n  };\n\n  function toCelsius(fahrenheit) {\n    return (fahrenheit - 32) * 5 / 9;\n  }\n  \n  function toFahrenheit(celsius) {\n    return (celsius * 9 / 5) + 32;\n  }\n\n  function tryConvert(temperature, convert) {\n    const input = parseFloat(temperature);\n    if(Number.isNaN(input)){\n      return ''\n    }\n\n    const output = convert(input);\n    const rounded = Math.round(output *1000)/1000;\n    return rounded.toString;\n  }\n\n  class TemperatureInput extends React.Component {\n    constructor(props) {\n      super(props);\n      this.handleChange = this.handleChange.bind(this);\n      this.state = {temperature: ''};\n    }\n  \n    handleChange(e) {\n      this.props.onTemperatureChange(e.target.value);\n    }\n  \n    render() {\n      const temperature = this.props.temperature;\n      const scale = this.props.scale;\n      return (\n        <fieldset>\n          <legend>Введите температуру в градусах {scaleNames[scale]}:</legend>\n          <input value={temperature}\n                 onChange={this.handleChange} />\n        </fieldset>\n      );\n    }\n  }\n\n  class Calculator extends React.Component {\n    constructor(props) {\n      super(props);\n      this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n      this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this); \n      this.state = {temperature: '', scale: 'c'};\n    }\n\n    handleCelsiusChange(temperature) {\n      this.setState({scale: 'c', temperature});\n    }\n  \n    handleFahrenheitChange(temperature) {\n      this.setState({scale: 'f', temperature});\n    }\n  \n  \n    render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n\n \n      return (\n        <div>\n          <TemperatureInput scale=\"c\" temperature={celsius} onTemperatureChange={this.handleCelsiusChange}/>\n          <TemperatureInput scale=\"f\" temperature={fahrenheit} onTemperatureChange={this.handleFahrenheitChange} />\n          <BoilingVerdict \n          celsius={parseFloat(celsius)} />\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Calculator></Calculator>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}